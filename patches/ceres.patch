diff --git a/CMakeLists.txt b/CMakeLists.txt
index 02c72b5c..58430f04 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -29,13 +29,8 @@
 # Authors: keir@google.com (Keir Mierle)
 #          alexs.mac@gmail.com (Alex Stewart)
 
-cmake_minimum_required(VERSION 2.8.0)
-cmake_policy(VERSION 2.8)
-
-cmake_policy(SET CMP0003 NEW)
-if (POLICY CMP0042)
-  cmake_policy(SET CMP0042 NEW)
-endif()
+cmake_minimum_required(VERSION 3.5)
+cmake_policy(VERSION 3.5)
 
 project(Ceres C CXX)
 
@@ -88,6 +83,10 @@ set(CMAKE_DEBUG_POSTFIX "-debug")
 include(ReadCeresVersionFromSource)
 read_ceres_version_from_source(${Ceres_SOURCE_DIR})
 
+# externpro
+include(flags OPTIONAL) # overwrites POSTFIX defines
+include(GNUInstallDirs)
+
 enable_testing()
 
 include(CMakeDependentOption)
@@ -823,21 +822,21 @@ endif (BUILD_EXAMPLES)
 
 # Setup installation of Ceres public headers.
 file(GLOB CERES_HDRS ${Ceres_SOURCE_DIR}/include/ceres/*.h)
-install(FILES ${CERES_HDRS} DESTINATION include/ceres)
+install(FILES ${CERES_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres)
 
 file(GLOB CERES_PUBLIC_INTERNAL_HDRS ${Ceres_SOURCE_DIR}/include/ceres/internal/*.h)
-install(FILES ${CERES_PUBLIC_INTERNAL_HDRS} DESTINATION include/ceres/internal)
+install(FILES ${CERES_PUBLIC_INTERNAL_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)
 
 # Also setup installation of Ceres config.h configured with the current
 # build options into the installed headers directory.
 install(FILES ${Ceres_BINARY_DIR}/config/ceres/internal/config.h
-        DESTINATION include/ceres/internal)
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal)
 
 if (MINIGLOG)
   # Install miniglog header if being used as logging #includes appear in
   # installed public Ceres headers.
   install(FILES ${Ceres_SOURCE_DIR}/internal/ceres/miniglog/glog/logging.h
-          DESTINATION include/ceres/internal/miniglog/glog)
+          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal/miniglog/glog)
 endif (MINIGLOG)
 
 # Ceres supports two mechanisms by which it can be detected & imported into
@@ -876,19 +875,27 @@ configure_file("${Ceres_SOURCE_DIR}/cmake/CeresConfigVersion.cmake.in"
 
 # Set the install path for the installed CeresConfig.cmake configuration file
 # relative to CMAKE_INSTALL_PREFIX.
-if (WIN32)
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR CMake)
+if (DEFINED CMAKE_INSTALL_LIBDIR)
+  set(RELATIVE_CMAKECONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/Ceres)
 else ()
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR lib${LIB_SUFFIX}/cmake/Ceres)
+  if (WIN32)
+    set(RELATIVE_CMAKECONFIG_INSTALL_DIR CMake)
+  else ()
+    set(RELATIVE_CMAKECONFIG_INSTALL_DIR lib${LIB_SUFFIX}/cmake/Ceres)
+  endif ()
 endif ()
 
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+
 # This "exports" for installation all targets which have been put into the
 # export set "CeresExport". This generates a CeresTargets.cmake file which,
 # when read in by a client project as part of find_package(Ceres) creates
 # imported library targets for Ceres (with dependency relations) which can be
 # used in target_link_libraries() calls in the client project to use Ceres.
 install(EXPORT CeresExport
-        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR} FILE CeresTargets.cmake)
+        DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR} ${nameSpace} FILE CeresTargets.cmake)
 
 # Save the relative path from the installed CeresConfig.cmake file to the
 # install prefix.  We do not save an absolute path in case the installed package
diff --git a/cmake/AddCeresCXX11RequirementsToTarget.cmake b/cmake/AddCeresCXX11RequirementsToTarget.cmake
index 107eb582..ca2ad645 100644
--- a/cmake/AddCeresCXX11RequirementsToTarget.cmake
+++ b/cmake/AddCeresCXX11RequirementsToTarget.cmake
@@ -67,8 +67,8 @@ function(add_ceres_cxx11_requirements_to_target)
         # gracefully, e.g. if a client of Ceres requires C++14, but Ceres was
         # compiled against C++11 then target_compile_options() may not work as
         # expected.
-        target_compile_features(
-          ${TARGET} PUBLIC cxx_alignas cxx_alignof cxx_constexpr)
+        #target_compile_features(
+        #  ${TARGET} PUBLIC cxx_alignas cxx_alignof cxx_constexpr)
       else()
         # CMake version >= 2.8.12 && < 3.1 supports target_compile_options()
         # but not target_compile_features(). For these intermediary versions,
diff --git a/internal/ceres/CMakeLists.txt b/internal/ceres/CMakeLists.txt
index cc43fec2..b65a0184 100644
--- a/internal/ceres/CMakeLists.txt
+++ b/internal/ceres/CMakeLists.txt
@@ -214,6 +214,10 @@ add_library(ceres ${CERES_LIBRARY_SOURCE})
 set_target_properties(ceres PROPERTIES
   VERSION ${CERES_VERSION}
   SOVERSION ${CERES_VERSION_MAJOR})
+target_include_directories(ceres PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+if (MINIGLOG)
+  target_include_directories(ceres PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/ceres/internal/miniglog>)
+endif()
 
 include(AppendTargetProperty)
 # Always build position-independent code (PIC), even when building Ceres as a
@@ -255,9 +259,9 @@ endif (BUILD_SHARED_LIBS)
 
 install(TARGETS ceres
         EXPORT  CeresExport
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib${LIB_SUFFIX}
-        ARCHIVE DESTINATION lib${LIB_SUFFIX})
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 if (BUILD_TESTING AND GFLAGS)
   add_library(gtest gmock_gtest_all.cc gmock_main.cc)
diff --git a/internal/ceres/thread_pool.h b/internal/ceres/thread_pool.h
index d596ecdb..228f344b 100644
--- a/internal/ceres/thread_pool.h
+++ b/internal/ceres/thread_pool.h
@@ -31,6 +31,7 @@
 #ifndef CERES_INTERNAL_THREAD_POOL_H_
 #define CERES_INTERNAL_THREAD_POOL_H_
 
+#include <functional>
 #include <mutex>
 #include <thread>
 #include <vector>
