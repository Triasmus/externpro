diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000000..df9ec9b66e
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,113 @@
+cmake_minimum_required(VERSION 3.20)
+project(openssl LANGUAGES C ASM)
+include(flags OPTIONAL)
+########################################
+set_property(GLOBAL PROPERTY USE_FOLDERS ON) # enables MSVC Solution Folders
+# NOTE: attempted to make OPENSSL_DEFS match other build systems (node.js and openssl perl)
+set(OPENSSL_DEFS
+  -D_REENTRANT
+  -DL_ENDIAN
+  -DOPENSSL_PIC
+  -DOPENSSLDIR=\"/etc/ssl\"
+  -DENGINESDIR=\"/dev/null\"
+  )
+if(WIN32)
+  list(APPEND OPENSSL_DEFS
+    -DOPENSSL_SYS_WIN32
+    -DWIN32_LEAN_AND_MEAN
+    -DUNICODE -D_UNICODE
+    -D_CRT_SECURE_NO_DEPRECATE
+    -D_WINSOCK_DEPRECATED_NO_WARNINGS
+    )
+  set(asmDir asmfromnode/archs/VC-WIN64A/asm)
+elseif(UNIX)
+  list(APPEND OPENSSL_DEFS
+    -DOPENSSL_USE_NODELETE
+    )
+  set(asmDir asmfromnode/archs/linux-${CMAKE_SYSTEM_PROCESSOR}/asm)
+endif()
+if((CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64") AND WIN32)
+  enable_language(ASM_NASM) # -DCMAKE_ASM_NASM_COMPILER=/path/to/nasm.exe
+endif()
+if(EXISTS ${CMAKE_SOURCE_DIR}/${asmDir} AND IS_DIRECTORY ${CMAKE_SOURCE_DIR}/${asmDir})
+  set(ASM_BUILD TRUE)
+  list(APPEND OPENSSL_DEFS
+    -DOPENSSL_CPUID_OBJ
+    -DOPENSSL_IA32_SSE2
+    -DOPENSSL_BN_ASM_MONT
+    -DOPENSSL_BN_ASM_GF2m
+    -DSHA1_ASM # must define L_ENDIAN for x86
+    -DSHA256_ASM
+    -DSHA512_ASM
+    -DRC4_ASM
+    -DMD5_ASM
+    -DVPAES_ASM
+    -DGHASH_ASM
+    -DECP_NISTZ256_ASM
+    -DPOLY1305_ASM
+    )
+  if(WIN32)
+    list(APPEND OPENSSL_DEFS
+      -DRMD160_ASM
+      -DAES_ASM
+      -DWHIRLPOOL_ASM
+      -DPADLOCK_ASM
+      )
+  elseif(UNIX)
+    list(APPEND OPENSSL_DEFS
+      -DOPENSSL_BN_ASM_MONT5
+      -DKECCAK1600_ASM
+      -DX25519_ASM
+      )
+  endif()
+else()
+  set(ASM_BUILD FALSE)
+  list(APPEND OPENSSL_DEFS
+    -DOPENSSL_NO_ASM
+    )
+endif()
+add_definitions(${OPENSSL_DEFS})
+########################################
+function(compareCmakeFilesys files)
+  file(GLOB_RECURSE filesys RELATIVE ${CMAKE_CURRENT_LIST_DIR} *)
+  file(GLOB_RECURSE ignorefiles RELATIVE ${CMAKE_CURRENT_LIST_DIR} .*.swp)
+  if(ignorefiles)
+    list(REMOVE_ITEM filesys ${ignorefiles})
+  endif()
+  foreach(f ${filesys})
+    list(FIND files ${f} index)
+    if(${index} GREATER -1)
+      list(REMOVE_AT files ${index})
+      list(REMOVE_ITEM filesys ${f})
+    endif()
+  endforeach()
+  if(filesys)
+    message(FATAL_ERROR "files not in cmake: ${filesys}")
+  endif()
+  foreach(f ${files})
+    get_filename_component(absPath ${f} ABSOLUTE)
+    if(NOT absPath MATCHES CMAKE_CURRENT_LIST_DIR)
+      # remove any files that aren't under CMAKE_CURRENT_LIST_DIR
+      list(REMOVE_ITEM files ${f})
+    endif()
+  endforeach()
+  if(files)
+    message(FATAL_ERROR "files not in repo, but in cmake: ${files}")
+  endif()
+endfunction()
+########################################
+if(DEFINED OPENSSL_VER)
+  set(ver _${OPENSSL_VER})
+  set(verDir /${PROJECT_NAME}${ver})
+endif()
+set(targetsFile ${PROJECT_NAME}${ver}-targets)
+########################################
+add_subdirectory(include)
+add_subdirectory(crypto)
+add_subdirectory(ssl)
+add_subdirectory(apps)
+add_subdirectory(test)
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+install(EXPORT ${targetsFile} DESTINATION lib/cmake ${nameSpace})
diff --git a/apps/CMakeLists.txt b/apps/CMakeLists.txt
new file mode 100644
index 0000000000..5cf5fd01cc
--- /dev/null
+++ b/apps/CMakeLists.txt
@@ -0,0 +1,277 @@
+set(folder apps)
+########################################
+# cmake-generate progs.h
+# patterned after progs.pl
+set(conf_file progs.h)
+set(INSERT_WARNING
+  " * WARNING: do not edit!\n * Generated by apps/CMakeLists.txt and apps/${conf_file}.cmake.in"
+  )
+string(TIMESTAMP CURRENT_YEAR "%Y")
+configure_file(${conf_file}.cmake.in ${conf_file} @ONLY)
+#######
+set(disablables
+  cms dsa ec engine ocsp srp ts
+  md2 md4 gost mdc2 rmd160 sm3
+  aria camellia des idea seed rc4 rc2 bf cast rc5 sm4
+  )
+set(func_table "\n#ifdef INCLUDE_FUNCTION_TABLE\nstatic FUNCTION functions[] = {\n")
+#######
+set(ciphers_disabler sock)
+set(genrsa_disabler rsa)
+set(rsautl_disabler rsa)
+set(gendsa_disabler dsa)
+set(dsaparam_disabler dsa)
+set(gendh_disabler dh)
+set(dhparam_disabler dh)
+set(ecparam_disabler ec)
+set(pkcs12_disabler des)
+foreach(cmd
+  asn1parse
+  ca ciphers cms crl crl2pkcs7
+  dgst dhparam dsa dsaparam
+  ec ecparam enc engine errstr
+  gendsa genpkey genrsa
+  help
+  list
+  nseq
+  ocsp
+  passwd pkcs12 pkcs7 pkcs8 pkey pkeyparam pkeyutl prime
+  rand rehash req rsa rsautl
+  s_client s_server s_time sess_id smime speed spkac srp storeutl
+  ts
+  verify version
+  x509
+  )
+  set(extern_int "${extern_int}\nextern int ${cmd}_main(int argc, char *argv[]);")
+  set(extern_const "${extern_const}\nextern const OPTIONS ${cmd}_options[];")
+  set(func_entry "    {FT_general, \"${cmd}\", ${cmd}_main, ${cmd}_options},\n")
+  if(cmd MATCHES "^s_")
+    set(func_entry "#ifndef OPENSSL_NO_SOCK\n${func_entry}#endif\n")
+  elseif(cmd IN_LIST disablables)
+    string(TOUPPER ${cmd} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  elseif(DEFINED ${cmd}_disabler)
+    string(TOUPPER ${${cmd}_disabler} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  endif()
+  set(func_table "${func_table}${func_entry}")
+endforeach()
+#######
+set(blake2b512_disabler blake2)
+set(blake2s256_disabler blake2)
+foreach(cmd
+  md2 md4 md5
+  gost
+  sha1 sha224 sha256 sha384
+  sha512 sha512-224 sha512-256
+  sha3-224 sha3-256 sha3-384 sha3-512
+  shake128 shake256
+  mdc2 rmd160 blake2b512 blake2s256
+  sm3
+  )
+  set(func_entry "    {FT_md, \"${cmd}\", dgst_main},\n")
+  if(cmd IN_LIST disablables)
+    string(TOUPPER ${cmd} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  elseif(DEFINED ${cmd}_disabler)
+    string(TOUPPER ${${cmd}_disabler} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  endif()
+  set(func_table "${func_table}${func_entry}")
+endforeach()
+#######
+set(des3_disabler des)
+set(desx_disabler des)
+set(cast5_disabler cast)
+foreach(cmd
+  aes-128-cbc aes-128-ecb
+  aes-192-cbc aes-192-ecb
+  aes-256-cbc aes-256-ecb
+  aria-128-cbc aria-128-cfb
+  aria-128-ctr aria-128-ecb aria-128-ofb
+  aria-128-cfb1 aria-128-cfb8
+  aria-192-cbc aria-192-cfb
+  aria-192-ctr aria-192-ecb aria-192-ofb
+  aria-192-cfb1 aria-192-cfb8
+  aria-256-cbc aria-256-cfb
+  aria-256-ctr aria-256-ecb aria-256-ofb
+  aria-256-cfb1 aria-256-cfb8
+  camellia-128-cbc camellia-128-ecb
+  camellia-192-cbc camellia-192-ecb
+  camellia-256-cbc camellia-256-ecb
+  base64 zlib
+  des des3 desx idea seed rc4 rc4-40
+  rc2 bf cast rc5
+  des-ecb des-ede des-ede3
+  des-cbc des-ede-cbc des-ede3-cbc
+  des-cfb des-ede-cfb des-ede3-cfb
+  des-ofb des-ede-ofb des-ede3-ofb
+  idea-cbc idea-ecb idea-cfb idea-ofb
+  seed-cbc seed-ecb seed-cfb seed-ofb
+  rc2-cbc rc2-ecb rc2-cfb rc2-ofb rc2-64-cbc rc2-40-cbc
+  bf-cbc bf-ecb bf-cfb bf-ofb
+  cast5-cbc cast5-ecb cast5-cfb cast5-ofb
+  cast-cbc rc5-cbc rc5-ecb rc5-cfb rc5-ofb
+  sm4-cbc sm4-ecb sm4-cfb sm4-ofb sm4-ctr
+  )
+  set(func_entry "    {FT_cipher, \"${cmd}\", enc_main, enc_options},\n")
+  string(REGEX MATCH "[^-]*" algo ${cmd})
+  if(cmd STREQUAL zlib)
+    set(func_entry "#ifdef ZLIB\n${func_entry}#endif\n")
+  elseif(algo IN_LIST disablables)
+    string(TOUPPER ${algo} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  elseif(DEFINED ${algo}_disabler)
+    string(TOUPPER ${${algo}_disabler} DEF)
+    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
+  endif()
+  set(func_table "${func_table}${func_entry}")
+endforeach()
+#######
+set(func_table "${func_table}    {0, NULL, NULL}\n};\n#endif\n")
+file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${conf_file}
+  "${extern_int}\n"
+  "${extern_const}\n"
+  "${func_table}"
+  )
+########################################
+set(apps_lib_src
+  apps.c
+  apps.h
+  opt.c
+  s_cb.c
+  s_socket.c
+  app_rand.c
+  bf_prefix.c
+  )
+source_group("" FILES ${apps_lib_src})
+add_library(apps STATIC ${apps_lib_src})
+target_link_libraries(apps PUBLIC include)
+set_property(TARGET apps PROPERTY FOLDER ${folder})
+list(APPEND apps_srcs ${apps_lib_src})
+########################################
+set(apps_openssl_src
+  openssl.c
+  asn1pars.c
+  ca.c
+  ciphers.c
+  cms.c
+  crl.c
+  crl2p7.c
+  dgst.c
+  dhparam.c
+  dsa.c
+  dsaparam.c
+  ec.c
+  ecparam.c
+  enc.c
+  engine.c
+  errstr.c
+  gendsa.c
+  genpkey.c
+  genrsa.c
+  nseq.c
+  ocsp.c
+  passwd.c
+  pkcs12.c
+  pkcs7.c
+  pkcs8.c
+  pkey.c
+  pkeyparam.c
+  pkeyutl.c
+  prime.c
+  rand.c
+  req.c
+  rsa.c
+  rsautl.c
+  s_apps.h
+  s_client.c
+  s_server.c
+  s_time.c
+  sess_id.c
+  smime.c
+  speed.c
+  spkac.c
+  srp.c
+  testdsa.h
+  testrsa.h
+  timeouts.h
+  ts.c
+  verify.c
+  version.c
+  x509.c
+  rehash.c
+  storeutl.c
+  )
+if(WIN32)
+  list(APPEND apps_openssl_src
+    win32_init.c
+    )
+else()
+  list(APPEND apps_srcs
+    win32_init.c
+    )
+endif()
+source_group("" FILES ${apps_openssl_src})
+add_executable(openssl ${apps_openssl_src})
+target_include_directories(openssl PRIVATE ${CMAKE_CURRENT_BINARY_DIR}) # progs.h
+target_link_libraries(openssl PRIVATE apps ssl)
+set_property(TARGET openssl PROPERTY FOLDER ${folder})
+list(APPEND apps_srcs ${apps_openssl_src})
+########################################
+# directories (ignore -- add to cmake)
+foreach(d
+  demoSRP
+  )
+  file(GLOB_RECURSE dir RELATIVE ${CMAKE_CURRENT_LIST_DIR} ${d}/*)
+  list(APPEND apps_srcs ${dir})
+endforeach()
+########################################
+# extra sources (part of cmake build)
+list(APPEND apps_srcs
+  CMakeLists.txt
+  progs.h.cmake.in
+  )
+########################################
+# extra sources (not part of build)
+list(APPEND apps_srcs
+  build.info
+  ca-cert.srl
+  ca-key.pem
+  CA.pl.in
+  ca-req.pem
+  cert.pem
+  client.pem
+  ct_log_list.cnf
+  dh1024.pem
+  dh2048.pem
+  dh4096.pem
+  dsa1024.pem
+  dsa512.pem
+  dsa-ca.pem
+  dsa-pca.pem
+  dsap.pem
+  openssl.cnf
+  openssl-vms.cnf
+  pca-cert.srl
+  pca-key.pem
+  pca-req.pem
+  privkey.pem
+  progs.pl
+  req.pem
+  rsa8192.pem
+  s1024key.pem
+  s1024req.pem
+  s512-key.pem
+  s512-req.pem
+  server2.pem
+  server.pem
+  server.srl
+  testCA.pem
+  tsget.in
+  vms_decc_init.c
+  vms_term_sock.c
+  vms_term_sock.h
+  )
+########################################
+compareCmakeFilesys("${apps_srcs}")
diff --git a/apps/progs.h.cmake.in b/apps/progs.h.cmake.in
new file mode 100644
index 0000000000..bd4643da6a
--- /dev/null
+++ b/apps/progs.h.cmake.in
@@ -0,0 +1,24 @@
+/*
+@INSERT_WARNING@
+ *
+ * Copyright 1995-@CURRENT_YEAR@ The OpenSSL Project Authors. All Rights Reserved.
+ *
+ * Licensed under the OpenSSL license (the "License").  You may not use
+ * this file except in compliance with the License.  You can obtain a copy
+ * in the file LICENSE in the source distribution or at
+ * https://www.openssl.org/source/license.html
+ */
+
+typedef enum FUNC_TYPE {
+    FT_none, FT_general, FT_md, FT_cipher, FT_pkey,
+    FT_md_alg, FT_cipher_alg
+} FUNC_TYPE;
+
+typedef struct function_st {
+    FUNC_TYPE type;
+    const char *name;
+    int (*func)(int argc, char *argv[]);
+    const OPTIONS *help;
+} FUNCTION;
+
+DEFINE_LHASH_OF(FUNCTION);
diff --git a/crypto/CMakeLists.txt b/crypto/CMakeLists.txt
new file mode 100644
index 0000000000..e552115983
--- /dev/null
+++ b/crypto/CMakeLists.txt
@@ -0,0 +1,1808 @@
+set(lib_name crypto)
+########################################
+set(gen_file buildinf.h)
+set(BUILDINF_PLATFORM ${CMAKE_SYSTEM_NAME})
+if(DEFINED OPENSSL_VER) # passed in via externpro
+  string(TIMESTAMP BUILDINF_DATE "%a %b %d %H:%M:%S %Y UTC" UTC)
+else()
+  string(TIMESTAMP BUILDINF_DATE "%a %b %d %Y UTC" UTC)
+endif()
+string(REPLACE ";" " " OPENSSL_DEFS_STR "${OPENSSL_DEFS}")
+if(WIN32)
+  set(compilerFlags "compiler: cl ${OPENSSL_DEFS_STR}")
+elseif(UNIX)
+  if(CMAKE_BUILD_TYPE)
+    string(TOUPPER ${CMAKE_BUILD_TYPE} BLD)
+  endif()
+  set(compilerFlags "compiler: gcc ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${BLD}} ${OPENSSL_DEFS_STR}")
+endif()
+string(LENGTH ${compilerFlags} lenFlags)
+math(EXPR maxPos ${lenFlags}-1)
+foreach(pos RANGE ${maxPos})
+  # Max 16 characters per line
+  math(EXPR newLine ${pos}%16)
+  if(newLine EQUAL 0)
+    set(BUILDINF_COMPILER_FLAGS "${BUILDINF_COMPILER_FLAGS}\n    ")
+  endif()
+  string(SUBSTRING ${compilerFlags} ${pos} 1 char)
+  set(BUILDINF_COMPILER_FLAGS "${BUILDINF_COMPILER_FLAGS}'${char}',")
+endforeach()
+set(BUILDINF_COMPILER_FLAGS "${BUILDINF_COMPILER_FLAGS}'\\0'")
+configure_file(${gen_file}.cmake.in ${gen_file} @ONLY)
+########################################
+# root
+set(root_srcs # order from crypto/build.info
+  build.info
+  cryptlib.c
+  mem.c
+  mem_dbg.c
+  cversion.c
+  ex_data.c
+  cpt_err.c
+  ebcdic.c
+  uid.c
+  o_time.c
+  o_str.c
+  o_dir.c
+  o_fopen.c
+  ctype.c
+  threads_pthread.c
+  threads_win.c
+  threads_none.c
+  getenv.c
+  o_init.c
+  o_fips.c
+  mem_sec.c
+  init.c
+  )
+if(NOT ASM_BUILD)
+  list(APPEND root_srcs
+    mem_clr.c # cpuid_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(root_extra
+    mem_clr.c
+    )
+endif()
+list(APPEND root_srcs
+  buildinf.h.cmake.in
+  ${CMAKE_CURRENT_BINARY_DIR}/buildinf.h
+  )
+source_group("" FILES ${root_srcs})
+list(APPEND ${lib_name}_libsrcs ${root_srcs})
+##########
+list(APPEND root_extra # order from crypto/build.info EXTRA
+  x86cpuid.pl
+  x86_64cpuid.pl
+  ia64cpuid.S
+  ppccpuid.pl
+  pariscid.pl
+  alphacpuid.pl
+  arm64cpuid.pl
+  armv4cpuid.pl
+  )
+list(APPEND root_extra # in directory, not in build.info
+  arm_arch.h
+  armcap.c
+  c64xpluscpuid.pl
+  dllmain.c
+  LPdir_nyi.c
+  LPdir_unix.c
+  LPdir_vms.c
+  LPdir_win32.c
+  LPdir_win.c
+  LPdir_wince.c
+  mips_arch.h
+  ppc_arch.h
+  ppccap.c
+  s390x_arch.h
+  s390xcap.c
+  s390xcpuid.pl
+  sparc_arch.h
+  sparccpuid.S
+  sparcv9cap.c
+  vms_rms.h
+  )
+list(APPEND root_extra # cmake
+  CMakeLists.txt
+  )
+list(APPEND ${lib_name}_all ${root_extra})
+####################
+# aes
+set(aes_srcs # order from crypto/aes/build.info
+  aes/build.info
+  aes/aes_misc.c
+  aes/aes_ecb.c
+  aes/aes_cfb.c
+  aes/aes_ofb.c
+  aes/aes_ige.c
+  aes/aes_wrap.c
+  )
+list(APPEND aes_srcs
+  aes/aes_local.h
+  aes/aes_core.c # aes_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  aes/aes_cbc.c # aes_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  aes/aes_x86core.c # needed on msw: unresolved external symbol AES_[en|de]crypt
+  )
+source_group(aes FILES ${aes_srcs})
+list(APPEND ${lib_name}_libsrcs ${aes_srcs})
+##########
+set(aes_extra # TODO asm
+  aes/asm/aes-armv4.pl
+  aes/asm/aes-c64xplus.pl
+  aes/asm/aesfx-sparcv9.pl
+  aes/asm/aes-ia64.S
+  aes/asm/aes-mips.pl
+  aes/asm/aesni-mb-x86_64.pl
+  aes/asm/aesni-sha1-x86_64.pl
+  aes/asm/aesni-sha256-x86_64.pl
+  aes/asm/aesni-x86_64.pl
+  aes/asm/aesni-x86.pl
+  aes/asm/aesp8-ppc.pl
+  aes/asm/aes-parisc.pl
+  aes/asm/aes-ppc.pl
+  aes/asm/aes-s390x.pl
+  aes/asm/aes-sparcv9.pl
+  aes/asm/aest4-sparcv9.pl
+  aes/asm/aesv8-armx.pl
+  aes/asm/bsaes-armv7.pl
+  aes/asm/vpaes-armv8.pl
+  aes/asm/vpaes-ppc.pl
+  aes/asm/vpaes-x86_64.pl
+  aes/asm/vpaes-x86.pl
+  )
+list(APPEND ${lib_name}_all ${aes_extra})
+####################
+# aria
+set(aria_srcs # order from crypto/aria/build.info
+  aria/build.info
+  aria/aria.c
+  )
+source_group(aria FILES ${aria_srcs})
+list(APPEND ${lib_name}_libsrcs ${aria_srcs})
+####################
+# asn1
+set(asn1_srcs # order from crypto/asn1/build.info
+  asn1/build.info
+  asn1/a_object.c
+  asn1/a_bitstr.c
+  asn1/a_utctm.c
+  asn1/a_gentm.c
+  asn1/a_time.c
+  asn1/a_int.c
+  asn1/a_octet.c
+  asn1/a_print.c
+  asn1/a_type.c
+  asn1/a_dup.c
+  asn1/a_d2i_fp.c
+  asn1/a_i2d_fp.c
+  asn1/a_utf8.c
+  asn1/a_sign.c
+  asn1/a_digest.c
+  asn1/a_verify.c
+  asn1/a_mbstr.c
+  asn1/a_strex.c
+  asn1/x_algor.c
+  asn1/x_val.c
+  asn1/x_sig.c
+  asn1/x_bignum.c
+  asn1/x_long.c
+  asn1/x_int64.c
+  asn1/x_info.c
+  asn1/x_spki.c
+  asn1/nsseq.c
+  asn1/d2i_pu.c
+  asn1/d2i_pr.c
+  asn1/i2d_pu.c
+  asn1/i2d_pr.c
+  asn1/t_pkey.c
+  asn1/t_spki.c
+  asn1/t_bitst.c
+  asn1/tasn_new.c
+  asn1/tasn_fre.c
+  asn1/tasn_enc.c
+  asn1/tasn_dec.c
+  asn1/tasn_utl.c
+  asn1/tasn_typ.c
+  asn1/tasn_prn.c
+  asn1/tasn_scn.c
+  asn1/ameth_lib.c
+  asn1/f_int.c
+  asn1/f_string.c
+  asn1/n_pkey.c
+  asn1/x_pkey.c
+  asn1/bio_asn1.c
+  asn1/bio_ndef.c
+  asn1/asn_mime.c
+  asn1/asn1_gen.c
+  asn1/asn1_par.c
+  asn1/asn1_lib.c
+  asn1/asn1_err.c
+  asn1/a_strnid.c
+  asn1/evp_asn1.c
+  asn1/asn_pack.c
+  asn1/p5_pbe.c
+  asn1/p5_pbev2.c
+  asn1/p5_scrypt.c
+  asn1/p8_pkey.c
+  asn1/asn_moid.c
+  asn1/asn_mstbl.c
+  asn1/asn1_item_list.c
+  )
+list(APPEND asn1_srcs
+  asn1/asn1_item_list.h
+  asn1/asn1_local.h
+  asn1/charmap.h
+  asn1/charmap.pl
+  asn1/standard_methods.h
+  asn1/tbl_standard.h
+  )
+source_group(asn1 FILES ${asn1_srcs})
+list(APPEND ${lib_name}_libsrcs ${asn1_srcs})
+####################
+# async
+set(async_srcs # order from crypto/async/build.info
+  async/build.info
+  async/async.c
+  async/async_wait.c
+  async/async_err.c
+  )
+list(APPEND async_srcs
+  async/async_local.h
+  )
+source_group(async FILES ${async_srcs})
+##########
+set(async_arch_srcs # order from crypto/async/build.info
+  async/arch/async_posix.c
+  async/arch/async_win.c
+  async/arch/async_null.c
+  )
+list(APPEND async_arch_srcs
+  async/arch/async_posix.h
+  async/arch/async_win.h
+  async/arch/async_null.h
+  )
+source_group(async\\arch FILES ${async_arch_srcs})
+list(APPEND ${lib_name}_libsrcs ${async_srcs} ${async_arch_srcs})
+####################
+# bf
+set(bf_srcs # order from crypto/bf/build.info
+  bf/build.info
+  bf/bf_skey.c
+  bf/bf_ecb.c
+  bf/bf_cfb64.c
+  bf/bf_ofb64.c
+  )
+list(APPEND bf_srcs
+  bf/bf_local.h
+  bf/bf_pi.h
+  bf/bf_enc.c # bf_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  )
+source_group(bf FILES ${bf_srcs})
+list(APPEND ${lib_name}_libsrcs ${bf_srcs})
+##########
+set(bf_extra # TODO asm
+  bf/asm/bf-586.pl
+  )
+list(APPEND ${lib_name}_all ${bf_extra})
+####################
+# bio
+set(bio_srcs # order from crypto/bio/build.info
+  bio/build.info
+  bio/bio_lib.c
+  bio/bio_cb.c
+  bio/bio_err.c
+  bio/bss_mem.c
+  bio/bss_null.c
+  bio/bss_fd.c
+  bio/bss_file.c
+  bio/bss_sock.c
+  bio/bss_conn.c
+  bio/bf_null.c
+  bio/bf_buff.c
+  bio/b_print.c
+  bio/b_dump.c
+  bio/b_addr.c
+  bio/b_sock.c
+  bio/b_sock2.c
+  bio/bss_acpt.c
+  bio/bf_nbio.c
+  bio/bss_log.c
+  bio/bss_bio.c
+  bio/bss_dgram.c
+  bio/bio_meth.c
+  bio/bf_lbuf.c
+  )
+list(APPEND bio_srcs
+  bio/bio_local.h
+  )
+source_group(bio FILES ${bio_srcs})
+list(APPEND ${lib_name}_libsrcs ${bio_srcs})
+####################
+# blake2
+set(blake2_srcs # order from crypto/blake2/build.info
+  blake2/build.info
+  blake2/blake2b.c
+  blake2/blake2s.c
+  blake2/m_blake2b.c
+  blake2/m_blake2s.c
+  )
+list(APPEND blake2_srcs
+  blake2/blake2_impl.h
+  blake2/blake2_local.h
+  )
+source_group(blake2 FILES ${blake2_srcs})
+list(APPEND ${lib_name}_libsrcs ${blake2_srcs})
+####################
+# bn
+set(bn_srcs # order from crypto/bn/build.info
+  bn/build.info
+  bn/bn_add.c
+  bn/bn_div.c
+  bn/bn_exp.c
+  bn/bn_lib.c
+  bn/bn_ctx.c
+  bn/bn_mul.c
+  bn/bn_mod.c
+  bn/bn_print.c
+  bn/bn_rand.c
+  bn/bn_shift.c
+  bn/bn_word.c
+  bn/bn_blind.c
+  bn/bn_kron.c
+  bn/bn_sqrt.c
+  bn/bn_gcd.c
+  bn/bn_prime.c
+  bn/bn_err.c
+  bn/bn_sqr.c
+  bn/bn_recp.c
+  bn/bn_mont.c
+  bn/bn_mpi.c
+  bn/bn_exp2.c
+  bn/bn_gf2m.c
+  bn/bn_nist.c
+  bn/bn_depr.c
+  bn/bn_const.c
+  bn/bn_x931p.c
+  bn/bn_intern.c
+  bn/bn_dh.c
+  bn/bn_srp.c
+  bn/rsaz_exp.c # in directory, not in build.info
+  bn/rsaz_exp.h
+  )
+list(APPEND bn_srcs
+  bn/bn_local.h
+  bn/bn_prime.h
+  )
+if(NOT ASM_BUILD)
+  list(APPEND bn_srcs
+    bn/bn_asm.c # bn_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(bn_extra
+    bn/bn_asm.c
+    )
+endif()
+source_group(bn FILES ${bn_srcs})
+list(APPEND ${lib_name}_libsrcs ${bn_srcs})
+##########
+list(APPEND bn_extra # in directory, not in build.info
+  bn/bn_prime.pl
+  bn/README.pod
+  )
+list(APPEND bn_extra # TODO asm
+  bn/asm/alpha-mont.pl
+  bn/asm/armv4-gf2m.pl
+  bn/asm/armv4-mont.pl
+  bn/asm/armv8-mont.pl
+  bn/asm/bn-586.pl
+  bn/asm/bn-c64xplus.asm
+  bn/asm/c64xplus-gf2m.pl
+  bn/asm/co-586.pl
+  bn/asm/ia64-mont.pl
+  bn/asm/ia64.S
+  bn/asm/mips-mont.pl
+  bn/asm/mips.pl
+  bn/asm/parisc-mont.pl
+  bn/asm/ppc64-mont.pl
+  bn/asm/ppc-mont.pl
+  bn/asm/ppc.pl
+  bn/asm/rsaz-avx2.pl
+  bn/asm/rsaz-x86_64.pl
+  bn/asm/s390x-gf2m.pl
+  bn/asm/s390x-mont.pl
+  bn/asm/s390x.S
+  bn/asm/sparct4-mont.pl
+  bn/asm/sparcv8plus.S
+  bn/asm/sparcv8.S
+  bn/asm/sparcv9a-mont.pl
+  bn/asm/sparcv9-gf2m.pl
+  bn/asm/sparcv9-mont.pl
+  bn/asm/via-mont.pl
+  bn/asm/vis3-mont.pl
+  bn/asm/x86_64-gcc.c # TRICKY part of bn_asm_srcs below
+  bn/asm/x86_64-gf2m.pl
+  bn/asm/x86_64-mont5.pl
+  bn/asm/x86_64-mont.pl
+  bn/asm/x86-gf2m.pl
+  bn/asm/x86-mont.pl
+  )
+list(APPEND ${lib_name}_all ${bn_extra})
+####################
+# buffer
+set(buffer_srcs # order from crypto/buffer/build.info
+  buffer/build.info
+  buffer/buffer.c
+  buffer/buf_err.c
+  )
+source_group(buffer FILES ${buffer_srcs})
+list(APPEND ${lib_name}_libsrcs ${buffer_srcs})
+####################
+# camellia
+set(camellia_srcs # order from crypto/camellia/build.info
+  camellia/build.info
+  camellia/cmll_ecb.c
+  camellia/cmll_ofb.c
+  camellia/cmll_cfb.c
+  camellia/cmll_ctr.c
+  )
+list(APPEND camellia_srcs
+  camellia/cmll_local.h
+  camellia/cmll_misc.c # cmll_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  )
+if(NOT ASM_BUILD)
+  list(APPEND camellia_srcs
+    camellia/camellia.c # cmll_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    camellia/cmll_cbc.c # cmll_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  list(APPEND camellia_extra
+    camellia/camellia.c
+    camellia/cmll_cbc.c
+    )
+endif()
+source_group(camellia FILES ${camellia_srcs})
+list(APPEND ${lib_name}_libsrcs ${camellia_srcs})
+##########
+list(APPEND camellia_extra # TODO asm
+  camellia/asm/cmllt4-sparcv9.pl
+  camellia/asm/cmll-x86_64.pl
+  camellia/asm/cmll-x86.pl
+  )
+list(APPEND ${lib_name}_all ${camellia_extra})
+####################
+# cast
+set(cast_srcs # order from crypto/cast/build.info
+  cast/build.info
+  cast/c_skey.c
+  cast/c_ecb.c
+  cast/c_cfb64.c
+  cast/c_ofb64.c
+  )
+list(APPEND cast_srcs
+  cast/cast_local.h
+  cast/cast_s.h
+  cast/c_enc.c # cast_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  )
+source_group(cast FILES ${cast_srcs})
+list(APPEND ${lib_name}_libsrcs ${cast_srcs})
+##########
+set(cast_extra # TODO asm
+  cast/asm/cast-586.pl
+  )
+list(APPEND ${lib_name}_all ${cast_extra})
+####################
+# chacha
+set(chacha_srcs # order from crypto/chacha/build.info
+  chacha/build.info
+  )
+if(NOT ASM_BUILD)
+  list(APPEND chacha_srcs
+    chacha/chacha_enc.c # chacha_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(chacha_extra
+    chacha/chacha_enc.c
+    )
+endif()
+source_group(chacha FILES ${chacha_srcs})
+list(APPEND ${lib_name}_libsrcs ${chacha_srcs})
+##########
+list(APPEND chacha_extra # TODO asm
+  chacha/asm/chacha-armv4.pl
+  chacha/asm/chacha-armv8.pl
+  chacha/asm/chacha-c64xplus.pl
+  chacha/asm/chacha-ppc.pl
+  chacha/asm/chacha-s390x.pl
+  chacha/asm/chacha-x86_64.pl
+  chacha/asm/chacha-x86.pl
+  )
+list(APPEND ${lib_name}_all ${chacha_extra})
+####################
+# cmac
+set(cmac_srcs # order from crypto/cmac/build.info
+  cmac/build.info
+  cmac/cmac.c
+  cmac/cm_ameth.c
+  cmac/cm_pmeth.c
+  )
+source_group(cmac FILES ${cmac_srcs})
+list(APPEND ${lib_name}_libsrcs ${cmac_srcs})
+####################
+# cms
+set(cms_srcs # order from crypto/cms/build.info
+  cms/build.info
+  cms/cms_lib.c
+  cms/cms_asn1.c
+  cms/cms_att.c
+  cms/cms_io.c
+  cms/cms_smime.c
+  cms/cms_err.c
+  cms/cms_sd.c
+  cms/cms_dd.c
+  cms/cms_cd.c
+  cms/cms_env.c
+  cms/cms_enc.c
+  cms/cms_ess.c
+  cms/cms_pwri.c
+  cms/cms_kari.c
+  )
+list(APPEND cms_srcs
+  cms/cms_local.h
+  )
+source_group(cms FILES ${cms_srcs})
+list(APPEND ${lib_name}_libsrcs ${cms_srcs})
+####################
+# comp
+set(comp_srcs # order from crypto/comp/build.info
+  comp/build.info
+  comp/comp_lib.c
+  comp/comp_err.c
+  comp/c_zlib.c
+  )
+list(APPEND comp_srcs
+  comp/comp_local.h
+  )
+source_group(comp FILES ${comp_srcs})
+list(APPEND ${lib_name}_libsrcs ${comp_srcs})
+####################
+# conf
+set(conf_srcs # order from crypto/conf/build.info
+  conf/build.info
+  conf/conf_err.c
+  conf/conf_lib.c
+  conf/conf_api.c
+  conf/conf_def.c
+  conf/conf_mod.c
+  conf/conf_mall.c
+  conf/conf_sap.c
+  conf/conf_ssl.c
+  )
+list(APPEND conf_srcs
+  conf/conf_def.h
+  conf/conf_local.h
+  conf/keysets.pl
+  )
+source_group(conf FILES ${conf_srcs})
+list(APPEND ${lib_name}_libsrcs ${conf_srcs})
+####################
+# ct
+set(ct_srcs # order from crypto/ct/build.info
+  ct/build.info
+  ct/ct_b64.c
+  ct/ct_err.c
+  ct/ct_log.c
+  ct/ct_oct.c
+  ct/ct_policy.c
+  ct/ct_prn.c
+  ct/ct_sct.c
+  ct/ct_sct_ctx.c
+  ct/ct_vfy.c
+  ct/ct_x509v3.c
+  )
+list(APPEND ct_srcs
+  ct/ct_local.h
+  )
+source_group(ct FILES ${ct_srcs})
+list(APPEND ${lib_name}_libsrcs ${ct_srcs})
+####################
+# des
+set(des_srcs # order from crypto/des/build.info
+  des/build.info
+  des/set_key.c
+  des/ecb_enc.c
+  des/cbc_enc.c
+  des/ecb3_enc.c
+  des/cfb64enc.c
+  des/cfb64ede.c
+  des/cfb_enc.c
+  des/ofb64ede.c
+  des/ofb64enc.c
+  des/ofb_enc.c
+  des/str2key.c
+  des/pcbc_enc.c
+  des/qud_cksm.c
+  des/rand_key.c
+  des/fcrypt.c
+  des/xcbc_enc.c
+  des/cbc_cksm.c
+  )
+list(APPEND des_srcs
+  des/des_local.h
+  des/spr.h
+  des/des_enc.c # des_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  des/fcrypt_b.c # des_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  )
+source_group(des FILES ${des_srcs})
+list(APPEND ${lib_name}_libsrcs ${des_srcs})
+##########
+set(des_extra # in directory, not in build.info
+  des/ncbc_enc.c # TODO libsrcs?
+  )
+list(APPEND des_extra # TODO asm
+  des/asm/crypt586.pl
+  des/asm/des-586.pl
+  des/asm/desboth.pl
+  des/asm/des_enc.m4
+  des/asm/dest4-sparcv9.pl
+  )
+list(APPEND ${lib_name}_all ${des_extra})
+####################
+# dh
+set(dh_srcs # order from crypto/dh/build.info
+  dh/build.info
+  dh/dh_asn1.c
+  dh/dh_gen.c
+  dh/dh_key.c
+  dh/dh_lib.c
+  dh/dh_check.c
+  dh/dh_err.c
+  dh/dh_depr.c
+  dh/dh_ameth.c
+  dh/dh_pmeth.c
+  dh/dh_prn.c
+  dh/dh_rfc5114.c
+  dh/dh_kdf.c
+  dh/dh_meth.c
+  dh/dh_rfc7919.c
+  )
+list(APPEND dh_srcs
+  dh/dh_local.h
+  dh/dh1024.pem
+  dh/dh192.pem
+  dh/dh2048.pem
+  dh/dh4096.pem
+  dh/dh512.pem
+  )
+source_group(dh FILES ${dh_srcs})
+list(APPEND ${lib_name}_libsrcs ${dh_srcs})
+####################
+# dsa
+set(dsa_srcs # order from crypto/dsa/build.info
+  dsa/build.info
+  dsa/dsa_gen.c
+  dsa/dsa_key.c
+  dsa/dsa_lib.c
+  dsa/dsa_asn1.c
+  dsa/dsa_vrf.c
+  dsa/dsa_sign.c
+  dsa/dsa_err.c
+  dsa/dsa_ossl.c
+  dsa/dsa_depr.c
+  dsa/dsa_ameth.c
+  dsa/dsa_pmeth.c
+  dsa/dsa_prn.c
+  dsa/dsa_meth.c
+  )
+list(APPEND dsa_srcs
+  dsa/dsa_local.h
+  )
+source_group(dsa FILES ${dsa_srcs})
+list(APPEND ${lib_name}_libsrcs ${dsa_srcs})
+####################
+# dso
+set(dso_srcs # order from crypto/dso/build.info
+  dso/build.info
+  dso/dso_dl.c
+  dso/dso_dlfcn.c
+  dso/dso_err.c
+  dso/dso_lib.c
+  dso/dso_openssl.c
+  dso/dso_win32.c
+  dso/dso_vms.c
+  )
+list(APPEND dso_srcs
+  dso/dso_local.h
+  )
+source_group(dso FILES ${dso_srcs})
+list(APPEND ${lib_name}_libsrcs ${dso_srcs})
+####################
+# ec
+set(ec_srcs # order from crypto/ec/build.info
+  ec/build.info
+  ec/ec_lib.c
+  ec/ecp_smpl.c
+  ec/ecp_mont.c
+  ec/ecp_nist.c
+  ec/ec_cvt.c
+  ec/ec_mult.c
+  ec/ec_err.c
+  ec/ec_curve.c
+  ec/ec_check.c
+  ec/ec_print.c
+  ec/ec_asn1.c
+  ec/ec_key.c
+  ec/ec2_smpl.c
+  ec/ec_ameth.c
+  ec/ec_pmeth.c
+  ec/eck_prn.c
+  ec/ecp_nistp224.c
+  ec/ecp_nistp256.c
+  ec/ecp_nistp521.c
+  ec/ecp_nistputil.c
+  ec/ecp_oct.c
+  ec/ec2_oct.c
+  ec/ec_oct.c
+  ec/ec_kmeth.c
+  ec/ecdh_ossl.c
+  ec/ecdh_kdf.c
+  ec/ecdsa_ossl.c
+  ec/ecdsa_sign.c
+  ec/ecdsa_vrf.c
+  ec/curve25519.c
+  ec/ecx_meth.c
+  ec/ecp_nistz256.c # in directory, not in build.info
+  )
+list(APPEND ec_srcs
+  ec/ec_local.h
+  )
+source_group(ec FILES ${ec_srcs})
+####
+set(ec_curve448_srcs # order from crypto/ec/build.info
+  ec/curve448/f_generic.c
+  ec/curve448/scalar.c
+  ec/curve448/curve448_tables.c
+  ec/curve448/eddsa.c
+  ec/curve448/curve448.c
+  )
+list(APPEND ec_curve448_srcs
+  ec/curve448/curve448_local.h
+  ec/curve448/curve448utils.h
+  ec/curve448/ed448.h
+  ec/curve448/field.h
+  ec/curve448/point_448.h
+  ec/curve448/word.h
+  )
+source_group(ec\\curve448 FILES ${ec_curve448_srcs})
+list(APPEND ec_srcs ${ec_curve448_srcs})
+####
+set(ec_curve448_arch_32_srcs
+  ec/curve448/arch_32/f_impl.c
+  )
+list(APPEND ec_curve448_arch_32_srcs
+  ec/curve448/arch_32/arch_intrinsics.h
+  ec/curve448/arch_32/f_impl.h
+  )
+source_group(ec\\curve448\\arch_32 FILES ${ec_curve448_arch_32_srcs})
+list(APPEND ec_srcs ${ec_curve448_arch_32_srcs})
+list(APPEND ${lib_name}_libsrcs ${ec_srcs})
+##########
+set(ec_extra # in directory, not in build.info
+  ec/ecp_nistz256_table.c # TODO libsrcs?
+  )
+list(APPEND ec_extra # TODO asm
+  ec/asm/ecp_nistz256-armv4.pl
+  ec/asm/ecp_nistz256-armv8.pl
+  ec/asm/ecp_nistz256-avx2.pl
+  ec/asm/ecp_nistz256-ppc64.pl
+  ec/asm/ecp_nistz256-sparcv9.pl
+  ec/asm/ecp_nistz256-x86_64.pl
+  ec/asm/ecp_nistz256-x86.pl
+  ec/asm/x25519-ppc64.pl
+  ec/asm/x25519-x86_64.pl
+  )
+list(APPEND ${lib_name}_all ${ec_extra})
+####################
+# engine
+set(engine_srcs # order from crypto/engine/build.info
+  engine/build.info
+  engine/eng_err.c
+  engine/eng_lib.c
+  engine/eng_list.c
+  engine/eng_init.c
+  engine/eng_ctrl.c
+  engine/eng_table.c
+  engine/eng_pkey.c
+  engine/eng_fat.c
+  engine/eng_all.c
+  engine/tb_rsa.c
+  engine/tb_dsa.c
+  engine/tb_dh.c
+  engine/tb_rand.c
+  engine/tb_cipher.c
+  engine/tb_digest.c
+  engine/tb_pkmeth.c
+  engine/tb_asnmth.c
+  engine/tb_eckey.c
+  engine/eng_openssl.c
+  engine/eng_cnf.c
+  engine/eng_dyn.c
+  engine/eng_rdrand.c
+  )
+list(APPEND engine_srcs
+  engine/eng_local.h
+  engine/README
+  )
+source_group(engine FILES ${engine_srcs})
+list(APPEND ${lib_name}_libsrcs ${engine_srcs})
+##########
+set(engine_extra # in directory, not in build.info
+  engine/eng_devcrypto.c # TODO libsrcs?
+  )
+list(APPEND ${lib_name}_all ${engine_extra})
+####################
+# err
+set(err_srcs # order from crypto/err/build.info
+  err/build.info
+  err/err.c
+  err/err_all.c
+  err/err_prn.c
+  )
+list(APPEND err_srcs
+  err/openssl.ec
+  err/openssl.txt
+  err/README
+  )
+source_group(err FILES ${err_srcs})
+list(APPEND ${lib_name}_libsrcs ${err_srcs})
+####################
+# evp
+set(evp_srcs # order from crypto/evp/build.info
+  evp/build.info
+  evp/encode.c
+  evp/digest.c
+  evp/evp_enc.c
+  evp/evp_key.c
+  evp/evp_cnf.c
+  evp/e_des.c
+  evp/e_bf.c
+  evp/e_idea.c
+  evp/e_des3.c
+  evp/e_camellia.c
+  evp/e_rc4.c
+  evp/e_aes.c
+  evp/names.c
+  evp/e_seed.c
+  evp/e_aria.c
+  evp/e_sm4.c
+  evp/e_xcbc_d.c
+  evp/e_rc2.c
+  evp/e_cast.c
+  evp/e_rc5.c
+  evp/m_null.c
+  evp/m_md2.c
+  evp/m_md4.c
+  evp/m_md5.c
+  evp/m_sha1.c
+  evp/m_wp.c
+  evp/m_md5_sha1.c
+  evp/m_mdc2.c
+  evp/m_ripemd.c
+  evp/m_sha3.c
+  evp/p_open.c
+  evp/p_seal.c
+  evp/p_sign.c
+  evp/p_verify.c
+  evp/p_lib.c
+  evp/p_enc.c
+  evp/p_dec.c
+  evp/bio_md.c
+  evp/bio_b64.c
+  evp/bio_enc.c
+  evp/evp_err.c
+  evp/e_null.c
+  evp/c_allc.c
+  evp/c_alld.c
+  evp/evp_lib.c
+  evp/bio_ok.c
+  evp/evp_pkey.c
+  evp/evp_pbe.c
+  evp/p5_crpt.c
+  evp/p5_crpt2.c
+  evp/pbe_scrypt.c
+  evp/e_old.c
+  evp/pmeth_lib.c
+  evp/pmeth_fn.c
+  evp/pmeth_gn.c
+  evp/m_sigver.c
+  evp/e_aes_cbc_hmac_sha1.c
+  evp/e_aes_cbc_hmac_sha256.c
+  evp/e_rc4_hmac_md5.c
+  evp/e_chacha20_poly1305.c
+  evp/cmeth_lib.c
+  )
+list(APPEND evp_srcs
+  evp/evp_local.h
+  )
+source_group(evp FILES ${evp_srcs})
+list(APPEND ${lib_name}_libsrcs ${evp_srcs})
+####################
+# hmac
+set(hmac_srcs # order from crypto/hmac/build.info
+  hmac/build.info
+  hmac/hmac.c
+  hmac/hm_ameth.c
+  hmac/hm_pmeth.c
+  )
+list(APPEND hmac_srcs
+  hmac/hmac_local.h
+  )
+source_group(hmac FILES ${hmac_srcs})
+list(APPEND ${lib_name}_libsrcs ${hmac_srcs})
+####################
+# idea
+set(idea_srcs # order from crypto/idea/build.info
+  idea/build.info
+  idea/i_cbc.c
+  idea/i_cfb64.c
+  idea/i_ofb64.c
+  idea/i_ecb.c
+  idea/i_skey.c
+  )
+list(APPEND idea_srcs
+  idea/idea_local.h
+  )
+source_group(idea FILES ${idea_srcs})
+list(APPEND ${lib_name}_libsrcs ${idea_srcs})
+####################
+# kdf
+set(kdf_srcs # order from crypto/kdf/build.info
+  kdf/build.info
+  kdf/tls1_prf.c
+  kdf/kdf_err.c
+  kdf/hkdf.c
+  kdf/scrypt.c
+  )
+source_group(kdf FILES ${kdf_srcs})
+list(APPEND ${lib_name}_libsrcs ${kdf_srcs})
+####################
+# lhash
+set(lhash_srcs # order from crypto/lhash/build.info
+  lhash/build.info
+  lhash/lhash.c
+  lhash/lh_stats.c
+  )
+list(APPEND lhash_srcs
+  lhash/lhash_local.h
+  )
+source_group(lhash FILES ${lhash_srcs})
+list(APPEND ${lib_name}_libsrcs ${lhash_srcs})
+####################
+# md2
+set(md2_srcs # order from crypto/md2/build.info
+  md2/build.info
+  md2/md2_dgst.c
+  md2/md2_one.c
+  )
+source_group(md2 FILES ${md2_srcs})
+list(APPEND ${lib_name}_libsrcs ${md2_srcs})
+####################
+# md4
+set(md4_srcs # order from crypto/md4/build.info
+  md4/build.info
+  md4/md4_dgst.c
+  md4/md4_one.c
+  )
+list(APPEND md4_srcs
+  md4/md4_local.h
+  )
+source_group(md4 FILES ${md4_srcs})
+list(APPEND ${lib_name}_libsrcs ${md4_srcs})
+####################
+# md5
+set(md5_srcs # order from crypto/md5/build.info
+  md5/build.info
+  md5/md5_dgst.c
+  md5/md5_one.c
+  )
+list(APPEND md5_srcs
+  md5/md5_local.h
+  )
+source_group(md5 FILES ${md5_srcs})
+list(APPEND ${lib_name}_libsrcs ${md5_srcs})
+##########
+set(md5_extra # TODO asm
+  md5/asm/md5-586.pl
+  md5/asm/md5-sparcv9.pl
+  md5/asm/md5-x86_64.pl
+  )
+list(APPEND ${lib_name}_all ${md5_extra})
+####################
+# mdc2
+set(mdc2_srcs # order from crypto/mdc2/build.info
+  mdc2/build.info
+  mdc2/mdc2dgst.c
+  mdc2/mdc2_one.c
+  )
+source_group(mdc2 FILES ${mdc2_srcs})
+list(APPEND ${lib_name}_libsrcs ${mdc2_srcs})
+####################
+# modes
+set(modes_srcs # order from crypto/modes/build.info
+  modes/build.info
+  modes/cbc128.c
+  modes/ctr128.c
+  modes/cts128.c
+  modes/cfb128.c
+  modes/ofb128.c
+  modes/gcm128.c
+  modes/ccm128.c
+  modes/xts128.c
+  modes/wrap128.c
+  modes/ocb128.c
+  )
+list(APPEND modes_srcs
+  modes/modes_local.h
+  )
+source_group(modes FILES ${modes_srcs})
+list(APPEND ${lib_name}_libsrcs ${modes_srcs})
+##########
+set(modes_extra # TODO asm
+  modes/asm/aesni-gcm-x86_64.pl
+  modes/asm/ghash-alpha.pl
+  modes/asm/ghash-armv4.pl
+  modes/asm/ghash-c64xplus.pl
+  modes/asm/ghash-ia64.pl
+  modes/asm/ghashp8-ppc.pl
+  modes/asm/ghash-parisc.pl
+  modes/asm/ghash-s390x.pl
+  modes/asm/ghash-sparcv9.pl
+  modes/asm/ghashv8-armx.pl
+  modes/asm/ghash-x86_64.pl
+  modes/asm/ghash-x86.pl
+  )
+list(APPEND ${lib_name}_all ${modes_extra})
+####################
+# objects
+set(objects_srcs # order from crypto/objects/build.info
+  objects/build.info
+  objects/o_names.c
+  objects/obj_dat.c
+  objects/obj_lib.c
+  objects/obj_err.c
+  objects/obj_xref.c
+  )
+list(APPEND objects_srcs
+  objects/obj_dat.h
+  objects/obj_local.h
+  objects/obj_xref.h
+  objects/obj_dat.pl
+  objects/objects.pl
+  objects/objxref.pl
+  objects/objects.txt
+  objects/obj_xref.txt
+  objects/obj_mac.num
+  objects/README
+  )
+source_group(objects FILES ${objects_srcs})
+list(APPEND ${lib_name}_libsrcs ${objects_srcs})
+####################
+# ocsp
+set(ocsp_srcs # order from crypto/ocsp/build.info
+  ocsp/build.info
+  ocsp/ocsp_asn.c
+  ocsp/ocsp_ext.c
+  ocsp/ocsp_ht.c
+  ocsp/ocsp_lib.c
+  ocsp/ocsp_cl.c
+  ocsp/ocsp_srv.c
+  ocsp/ocsp_prn.c
+  ocsp/ocsp_vfy.c
+  ocsp/ocsp_err.c
+  ocsp/v3_ocsp.c
+  )
+list(APPEND ocsp_srcs
+  ocsp/ocsp_local.h
+  )
+source_group(ocsp FILES ${ocsp_srcs})
+list(APPEND ${lib_name}_libsrcs ${ocsp_srcs})
+####################
+# pem
+set(pem_srcs # order from crypto/pem/build.info
+  pem/build.info
+  pem/pem_sign.c
+  pem/pem_info.c
+  pem/pem_lib.c
+  pem/pem_all.c
+  pem/pem_err.c
+  pem/pem_x509.c
+  pem/pem_xaux.c
+  pem/pem_oth.c
+  pem/pem_pk8.c
+  pem/pem_pkey.c
+  pem/pvkfmt.c
+  )
+source_group(pem FILES ${pem_srcs})
+list(APPEND ${lib_name}_libsrcs ${pem_srcs})
+####################
+# perlasm
+set(perlasm_srcs # no build.info in directory
+  perlasm/arm-xlate.pl
+  perlasm/cbc.pl
+  perlasm/ppc-xlate.pl
+  perlasm/README
+  perlasm/sparcv9_modes.pl
+  perlasm/x86_64-xlate.pl
+  perlasm/x86asm.pl
+  perlasm/x86gas.pl
+  perlasm/x86masm.pl
+  perlasm/x86nasm.pl
+  )
+source_group(perlasm FILES ${perlasm_srcs})
+list(APPEND ${lib_name}_libsrcs ${perlasm_srcs})
+####################
+# pkcs12
+set(pkcs12_srcs # order from crypto/pkcs12/build.info
+  pkcs12/build.info
+  pkcs12/p12_add.c
+  pkcs12/p12_asn.c
+  pkcs12/p12_attr.c
+  pkcs12/p12_crpt.c
+  pkcs12/p12_crt.c
+  pkcs12/p12_decr.c
+  pkcs12/p12_init.c
+  pkcs12/p12_key.c
+  pkcs12/p12_kiss.c
+  pkcs12/p12_mutl.c
+  pkcs12/p12_sbag.c
+  pkcs12/p12_utl.c
+  pkcs12/p12_npas.c
+  pkcs12/pk12err.c
+  pkcs12/p12_p8d.c
+  pkcs12/p12_p8e.c
+  )
+list(APPEND pkcs12_srcs
+  pkcs12/p12_local.h
+  )
+source_group(pkcs12 FILES ${pkcs12_srcs})
+list(APPEND ${lib_name}_libsrcs ${pkcs12_srcs})
+####################
+# pkcs7
+set(pkcs7_srcs # order from crypto/pkcs7/build.info
+  pkcs7/build.info
+  pkcs7/pk7_asn1.c
+  pkcs7/pk7_lib.c
+  pkcs7/pkcs7err.c
+  pkcs7/pk7_doit.c
+  pkcs7/pk7_smime.c
+  pkcs7/pk7_attr.c
+  pkcs7/pk7_mime.c
+  pkcs7/bio_pk7.c
+  )
+source_group(pkcs7 FILES ${pkcs7_srcs})
+list(APPEND ${lib_name}_libsrcs ${pkcs7_srcs})
+####################
+# poly1305
+set(poly1305_srcs # order from crypto/poly1305/build.info
+  poly1305/build.info
+  poly1305/poly1305_pmeth.c
+  poly1305/poly1305_ameth.c
+  poly1305/poly1305.c
+  )
+list(APPEND poly1305_srcs
+  poly1305/poly1305_local.h
+  )
+source_group(poly1305 FILES ${poly1305_srcs})
+list(APPEND ${lib_name}_libsrcs ${poly1305_srcs})
+##########
+set(poly1305_extra # in directory, not in build.info
+  poly1305/poly1305_base2_44.c # TODO libsrcs?
+  poly1305/poly1305_ieee754.c # TODO libsrcs?
+  )
+list(APPEND poly1305_extra # TODO asm
+  poly1305/asm/poly1305-armv4.pl
+  poly1305/asm/poly1305-armv8.pl
+  poly1305/asm/poly1305-c64xplus.pl
+  poly1305/asm/poly1305-mips.pl
+  poly1305/asm/poly1305-ppcfp.pl
+  poly1305/asm/poly1305-ppc.pl
+  poly1305/asm/poly1305-s390x.pl
+  poly1305/asm/poly1305-sparcv9.pl
+  poly1305/asm/poly1305-x86_64.pl
+  poly1305/asm/poly1305-x86.pl
+  )
+list(APPEND ${lib_name}_all ${poly1305_extra})
+####################
+# rand
+set(rand_srcs # order from crypto/rand/build.info
+  rand/build.info
+  rand/randfile.c
+  rand/rand_lib.c
+  rand/rand_err.c
+  rand/rand_egd.c
+  rand/rand_win.c
+  rand/rand_unix.c
+  rand/rand_vms.c
+  rand/drbg_lib.c
+  rand/drbg_ctr.c
+  )
+list(APPEND rand_srcs
+  rand/rand_local.h
+  )
+source_group(rand FILES ${rand_srcs})
+list(APPEND ${lib_name}_libsrcs ${rand_srcs})
+####################
+# rc2
+set(rc2_srcs # order from crypto/rc2/build.info
+  rc2/build.info
+  rc2/rc2_ecb.c
+  rc2/rc2_skey.c
+  rc2/rc2_cbc.c
+  rc2/rc2cfb64.c
+  rc2/rc2ofb64.c
+  )
+list(APPEND rc2_srcs
+  rc2/rc2_local.h
+  )
+source_group(rc2 FILES ${rc2_srcs})
+list(APPEND ${lib_name}_libsrcs ${rc2_srcs})
+####################
+# rc4
+set(rc4_srcs
+  rc4/build.info
+  rc4/rc4_local.h
+  )
+if(NOT ASM_BUILD)
+  list(APPEND rc4_srcs
+    rc4/rc4_enc.c # rc4_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    rc4/rc4_skey.c # rc4_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(rc4_extra
+    rc4/rc4_enc.c
+    rc4/rc4_skey.c
+    )
+endif()
+source_group(rc4 FILES ${rc4_srcs})
+list(APPEND ${lib_name}_libsrcs ${rc4_srcs})
+##########
+list(APPEND rc4_extra # TODO asm
+  rc4/asm/rc4-586.pl
+  rc4/asm/rc4-c64xplus.pl
+  rc4/asm/rc4-md5-x86_64.pl
+  rc4/asm/rc4-parisc.pl
+  rc4/asm/rc4-s390x.pl
+  rc4/asm/rc4-x86_64.pl
+  )
+list(APPEND ${lib_name}_all ${rc4_extra})
+####################
+# rc5
+set(rc5_srcs # order from crypto/rc5/build.info
+  rc5/build.info
+  rc5/rc5_skey.c
+  rc5/rc5_ecb.c
+  rc5/rc5cfb64.c
+  rc5/rc5ofb64.c
+  )
+list(APPEND rc5_srcs
+  rc5/rc5_local.h
+  rc5/rc5_enc.c # rc5_asm_src DEFAULT (Configurations/00-base-templates.conf)
+  )
+source_group(rc5 FILES ${rc5_srcs})
+list(APPEND ${lib_name}_libsrcs ${rc5_srcs})
+##########
+set(rc5_extra # TODO asm
+  rc5/asm/rc5-586.pl
+  )
+list(APPEND ${lib_name}_all ${rc5_extra})
+####################
+# ripemd
+set(ripemd_srcs # order from crypto/ripemd/build.info
+  ripemd/build.info
+  ripemd/rmd_dgst.c
+  ripemd/rmd_one.c
+  )
+list(APPEND ripemd_srcs
+  ripemd/rmd_local.h
+  ripemd/rmdconst.h
+  )
+source_group(ripemd FILES ${ripemd_srcs})
+list(APPEND ${lib_name}_libsrcs ${ripemd_srcs})
+##########
+set(ripemd_extra # TODO asm
+  ripemd/asm/rmd-586.pl
+  )
+list(APPEND ${lib_name}_all ${ripemd_extra})
+####################
+# rsa
+set(rsa_srcs # order from crypto/rsa/build.info
+  rsa/build.info
+  rsa/rsa_ossl.c
+  rsa/rsa_gen.c
+  rsa/rsa_lib.c
+  rsa/rsa_sign.c
+  rsa/rsa_saos.c
+  rsa/rsa_err.c
+  rsa/rsa_pk1.c
+  rsa/rsa_ssl.c
+  rsa/rsa_none.c
+  rsa/rsa_oaep.c
+  rsa/rsa_chk.c
+  rsa/rsa_pss.c
+  rsa/rsa_x931.c
+  rsa/rsa_asn1.c
+  rsa/rsa_depr.c
+  rsa/rsa_ameth.c
+  rsa/rsa_prn.c
+  rsa/rsa_pmeth.c
+  rsa/rsa_crpt.c
+  rsa/rsa_x931g.c
+  rsa/rsa_meth.c
+  rsa/rsa_mp.c
+  )
+list(APPEND rsa_srcs
+  rsa/rsa_local.h
+  )
+source_group(rsa FILES ${rsa_srcs})
+list(APPEND ${lib_name}_libsrcs ${rsa_srcs})
+####################
+# seed
+set(seed_srcs # order from crypto/seed/build.info
+  seed/build.info
+  seed/seed.c
+  seed/seed_ecb.c
+  seed/seed_cbc.c
+  seed/seed_cfb.c
+  seed/seed_ofb.c
+  )
+list(APPEND seed_srcs
+  seed/seed_local.h
+  )
+source_group(seed FILES ${seed_srcs})
+list(APPEND ${lib_name}_libsrcs ${seed_srcs})
+####################
+# sha
+set(sha_srcs # order from crypto/sha/Makefile
+  sha/build.info
+  sha/sha1dgst.c
+  sha/sha1_one.c
+  sha/sha256.c
+  sha/sha512.c
+  )
+list(APPEND sha_srcs
+  sha/sha_local.h
+  )
+if(NOT ASM_BUILD)
+  list(APPEND sha_srcs
+    sha/keccak1600.c # keccak1600_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(sha_extra
+    sha/keccak1600.c
+    )
+endif()
+source_group(sha FILES ${sha_srcs})
+list(APPEND ${lib_name}_libsrcs ${sha_srcs})
+##########
+list(APPEND sha_extra # TODO asm
+  sha/asm/keccak1600-armv4.pl
+  sha/asm/keccak1600-armv8.pl
+  sha/asm/keccak1600-avx2.pl
+  sha/asm/keccak1600-avx512.pl
+  sha/asm/keccak1600-avx512vl.pl
+  sha/asm/keccak1600-c64x.pl
+  sha/asm/keccak1600-mmx.pl
+  sha/asm/keccak1600p8-ppc.pl
+  sha/asm/keccak1600-ppc64.pl
+  sha/asm/keccak1600-s390x.pl
+  sha/asm/keccak1600-x86_64.pl
+  sha/asm/sha1-586.pl
+  sha/asm/sha1-alpha.pl
+  sha/asm/sha1-armv4-large.pl
+  sha/asm/sha1-armv8.pl
+  sha/asm/sha1-c64xplus.pl
+  sha/asm/sha1-ia64.pl
+  sha/asm/sha1-mb-x86_64.pl
+  sha/asm/sha1-mips.pl
+  sha/asm/sha1-parisc.pl
+  sha/asm/sha1-ppc.pl
+  sha/asm/sha1-s390x.pl
+  sha/asm/sha1-sparcv9a.pl
+  sha/asm/sha1-sparcv9.pl
+  sha/asm/sha1-thumb.pl
+  sha/asm/sha1-x86_64.pl
+  sha/asm/sha256-586.pl
+  sha/asm/sha256-armv4.pl
+  sha/asm/sha256-c64xplus.pl
+  sha/asm/sha256-mb-x86_64.pl
+  sha/asm/sha512-586.pl
+  sha/asm/sha512-armv4.pl
+  sha/asm/sha512-armv8.pl
+  sha/asm/sha512-c64xplus.pl
+  sha/asm/sha512-ia64.pl
+  sha/asm/sha512-mips.pl
+  sha/asm/sha512p8-ppc.pl
+  sha/asm/sha512-parisc.pl
+  sha/asm/sha512-ppc.pl
+  sha/asm/sha512-s390x.pl
+  sha/asm/sha512-sparcv9.pl
+  sha/asm/sha512-x86_64.pl
+  )
+list(APPEND ${lib_name}_all ${sha_extra})
+####################
+# siphash
+set(siphash_srcs # order from crypto/siphash/build.info
+  siphash/build.info
+  siphash/siphash.c
+  siphash/siphash_pmeth.c
+  siphash/siphash_ameth.c
+  )
+list(APPEND siphash_srcs
+  siphash/siphash_local.h
+  )
+source_group(siphash FILES ${siphash_srcs})
+list(APPEND ${lib_name}_libsrcs ${siphash_srcs})
+####################
+# sm2
+set(sm2_srcs # order from crypto/sm2/build.info
+  sm2/build.info
+  sm2/sm2_sign.c
+  sm2/sm2_crypt.c
+  sm2/sm2_err.c
+  sm2/sm2_pmeth.c
+  )
+source_group(sm2 FILES ${sm2_srcs})
+list(APPEND ${lib_name}_libsrcs ${sm2_srcs})
+####################
+# sm3
+set(sm3_srcs # order from crypto/sm3/build.info
+  sm3/build.info
+  sm3/sm3.c
+  sm3/m_sm3.c
+  )
+list(APPEND sm3_srcs
+  sm3/sm3_local.h
+  )
+source_group(sm3 FILES ${sm3_srcs})
+list(APPEND ${lib_name}_libsrcs ${sm3_srcs})
+####################
+# sm4
+set(sm4_srcs # order from crypto/sm4/build.info
+  sm4/build.info
+  sm4/sm4.c
+  )
+source_group(sm4 FILES ${sm4_srcs})
+list(APPEND ${lib_name}_libsrcs ${sm4_srcs})
+####################
+# srp
+set(srp_srcs # order from crypto/srp/build.info
+  srp/build.info
+  srp/srp_lib.c
+  srp/srp_vfy.c
+  )
+source_group(srp FILES ${srp_srcs})
+list(APPEND ${lib_name}_libsrcs ${srp_srcs})
+####################
+# stack
+set(stack_srcs
+  stack/build.info
+  stack/stack.c
+  )
+source_group(stack FILES ${stack_srcs})
+list(APPEND ${lib_name}_libsrcs ${stack_srcs})
+####################
+# store
+set(store_srcs # order from crypto/store/build.info
+  store/build.info
+  store/store_err.c
+  store/store_init.c
+  store/store_lib.c
+  store/store_register.c
+  store/store_strings.c
+  store/loader_file.c
+  )
+list(APPEND store_srcs
+  store/store_local.h
+  )
+source_group(store FILES ${store_srcs})
+list(APPEND ${lib_name}_libsrcs ${store_srcs})
+####################
+# ts
+set(ts_srcs # order from crypto/ts/build.info
+  ts/build.info
+  ts/ts_err.c
+  ts/ts_req_utils.c
+  ts/ts_req_print.c
+  ts/ts_rsp_utils.c
+  ts/ts_rsp_print.c
+  ts/ts_rsp_sign.c
+  ts/ts_rsp_verify.c
+  ts/ts_verify_ctx.c
+  ts/ts_lib.c
+  ts/ts_conf.c
+  ts/ts_asn1.c
+  )
+list(APPEND ts_srcs
+  ts/ts_local.h
+  )
+source_group(ts FILES ${ts_srcs})
+list(APPEND ${lib_name}_libsrcs ${ts_srcs})
+####################
+# txt_db
+set(txt_db_srcs
+  txt_db/build.info
+  txt_db/txt_db.c
+  )
+source_group(txt_db FILES ${txt_db_srcs})
+list(APPEND ${lib_name}_libsrcs ${txt_db_srcs})
+####################
+# ui
+set(ui_srcs # order from crypto/ui/build.info
+  ui/build.info
+  ui/ui_err.c
+  ui/ui_lib.c
+  ui/ui_openssl.c
+  ui/ui_null.c
+  ui/ui_util.c
+  )
+list(APPEND ui_srcs
+  ui/ui_local.h
+  )
+source_group(ui FILES ${ui_srcs})
+list(APPEND ${lib_name}_libsrcs ${ui_srcs})
+####################
+# whrlpool
+set(whrlpool_srcs # order from crypto/whrlpool/build.info
+  whrlpool/build.info
+  whrlpool/wp_dgst.c
+  )
+list(APPEND whrlpool_srcs
+  whrlpool/wp_local.h
+  )
+if(NOT ASM_BUILD)
+  list(APPEND whrlpool_srcs
+    whrlpool/wp_block.c # wp_asm_src DEFAULT (Configurations/00-base-templates.conf)
+    )
+else()
+  set(whrlpool_extra
+    whrlpool/wp_block.c
+    )
+endif()
+source_group(whrlpool FILES ${whrlpool_srcs})
+list(APPEND ${lib_name}_libsrcs ${whrlpool_srcs})
+##########
+list(APPEND whrlpool_extra # TODO asm
+  whrlpool/asm/wp-mmx.pl
+  whrlpool/asm/wp-x86_64.pl
+  )
+list(APPEND ${lib_name}_all ${whrlpool_extra})
+####################
+# x509
+set(x509_srcs # order from crypto/x509/build.info
+  x509/build.info
+  x509/x509_def.c
+  x509/x509_d2.c
+  x509/x509_r2x.c
+  x509/x509_cmp.c
+  x509/x509_obj.c
+  x509/x509_req.c
+  x509/x509spki.c
+  x509/x509_vfy.c
+  x509/x509_set.c
+  x509/x509cset.c
+  x509/x509rset.c
+  x509/x509_err.c
+  x509/x509name.c
+  x509/x509_v3.c
+  x509/x509_ext.c
+  x509/x509_att.c
+  x509/x509type.c
+  x509/x509_meth.c
+  x509/x509_lu.c
+  x509/x_all.c
+  x509/x509_txt.c
+  x509/x509_trs.c
+  x509/by_file.c
+  x509/by_dir.c
+  x509/x509_vpm.c
+  x509/x_crl.c
+  x509/t_crl.c
+  x509/x_req.c
+  x509/t_req.c
+  x509/x_x509.c
+  x509/t_x509.c
+  x509/x_pubkey.c
+  x509/x_x509a.c
+  x509/x_attrib.c
+  x509/x_exten.c
+  x509/x_name.c
+  )
+list(APPEND x509_srcs
+  x509/x509_local.h
+  )
+source_group(x509 FILES ${x509_srcs})
+list(APPEND ${lib_name}_libsrcs ${x509_srcs})
+####################
+# x509v3
+set(x509v3_srcs # order from crypto/x509v3/build.info
+  x509v3/build.info
+  x509v3/v3_bcons.c
+  x509v3/v3_bitst.c
+  x509v3/v3_conf.c
+  x509v3/v3_extku.c
+  x509v3/v3_ia5.c
+  x509v3/v3_lib.c
+  x509v3/v3_prn.c
+  x509v3/v3_utl.c
+  x509v3/v3err.c
+  x509v3/v3_genn.c
+  x509v3/v3_alt.c
+  x509v3/v3_skey.c
+  x509v3/v3_akey.c
+  x509v3/v3_pku.c
+  x509v3/v3_int.c
+  x509v3/v3_enum.c
+  x509v3/v3_sxnet.c
+  x509v3/v3_cpols.c
+  x509v3/v3_crld.c
+  x509v3/v3_purp.c
+  x509v3/v3_info.c
+  x509v3/v3_akeya.c
+  x509v3/v3_pmaps.c
+  x509v3/v3_pcons.c
+  x509v3/v3_ncons.c
+  x509v3/v3_pcia.c
+  x509v3/v3_pci.c
+  x509v3/pcy_cache.c
+  x509v3/pcy_node.c
+  x509v3/pcy_data.c
+  x509v3/pcy_map.c
+  x509v3/pcy_tree.c
+  x509v3/pcy_lib.c
+  x509v3/v3_asid.c
+  x509v3/v3_addr.c
+  x509v3/v3_tlsf.c
+  x509v3/v3_admis.c
+  )
+list(APPEND x509v3_srcs
+  x509v3/ext_dat.h
+  x509v3/pcy_local.h
+  x509v3/standard_exts.h
+  x509v3/v3_admis.h
+  )
+source_group(x509v3 FILES ${x509v3_srcs})
+list(APPEND ${lib_name}_libsrcs ${x509v3_srcs})
+########################################
+set(asmDir ../${asmDir}/crypto)
+if(MSVC)
+  set(asmExt asm)
+elseif(UNIX)
+  set(asmExt s)
+endif()
+if(ASM_BUILD)
+  set(root_asm_srcs
+    ${asmDir}/x86_64cpuid.${asmExt} # cpuid_asm_src
+    )
+  source_group(asm FILES ${root_asm_srcs})
+  set(asm_srcs ${root_asm_srcs})
+  ##########
+  set(aes_asm_srcs
+    ${asmDir}/aes/aesni-mb-x86_64.${asmExt}
+    ${asmDir}/aes/aesni-sha1-x86_64.${asmExt}
+    ${asmDir}/aes/aesni-sha256-x86_64.${asmExt}
+    ${asmDir}/aes/aesni-x86_64.${asmExt}
+    #${asmDir}/aes/aes-x86_64.${asmExt} # multiple definition of AES_encrypt (first defined in aes_core.c)
+    #${asmDir}/aes/bsaes-x86_64.${asmExt} # not in aes_asm_src (Configurations/00-base-templates.conf)
+    ${asmDir}/aes/vpaes-x86_64.${asmExt}
+    )
+  source_group(aes\\asm FILES ${aes_asm_srcs})
+  list(APPEND asm_srcs ${aes_asm_srcs})
+  ##########
+  set(bn_asm_srcs
+    bn/asm/x86_64-gcc.c
+    ${asmDir}/bn/rsaz-avx2.${asmExt}
+    ${asmDir}/bn/rsaz-x86_64.${asmExt}
+    ${asmDir}/bn/x86_64-gf2m.${asmExt}
+    ${asmDir}/bn/x86_64-mont5.${asmExt}
+    ${asmDir}/bn/x86_64-mont.${asmExt}
+    )
+  source_group(bn\\asm FILES ${bn_asm_srcs})
+  list(APPEND asm_srcs ${bn_asm_srcs})
+  ##########
+  set(camellia_asm_srcs
+    ${asmDir}/camellia/cmll-x86_64.${asmExt}
+    )
+  source_group(camellia\\asm FILES ${camellia_asm_srcs})
+  list(APPEND asm_srcs ${camellia_asm_srcs})
+  ##########
+  set(chacha_asm_srcs
+    ${asmDir}/chacha/chacha-x86_64.${asmExt}
+    )
+  source_group(chacha\\asm FILES ${chacha_asm_srcs})
+  list(APPEND asm_srcs ${chacha_asm_srcs})
+  ##########
+  set(ec_asm_srcs
+    ${asmDir}/ec/ecp_nistz256-x86_64.${asmExt}
+    ${asmDir}/ec/x25519-x86_64.${asmExt}
+    )
+  source_group(ec\\asm FILES ${ec_asm_srcs})
+  list(APPEND asm_srcs ${ec_asm_srcs})
+  ##########
+  set(md5_asm_srcs
+    ${asmDir}/md5/md5-x86_64.${asmExt}
+    )
+  source_group(md5\\asm FILES ${md5_asm_srcs})
+  list(APPEND asm_srcs ${md5_asm_srcs})
+  ##########
+  set(modes_asm_srcs
+    ${asmDir}/modes/aesni-gcm-x86_64.${asmExt}
+    ${asmDir}/modes/ghash-x86_64.${asmExt}
+    )
+  source_group(modes\\asm FILES ${modes_asm_srcs})
+  list(APPEND asm_srcs ${modes_asm_srcs})
+  ##########
+  set(poly1305_asm_srcs
+    ${asmDir}/poly1305/poly1305-x86_64.${asmExt}
+    )
+  source_group(poly1305\\asm FILES ${poly1305_asm_srcs})
+  list(APPEND asm_srcs ${poly1305_asm_srcs})
+  ##########
+  set(rc4_asm_srcs
+    ${asmDir}/rc4/rc4-md5-x86_64.${asmExt}
+    ${asmDir}/rc4/rc4-x86_64.${asmExt}
+    )
+  source_group(rc4\\asm FILES ${rc4_asm_srcs})
+  list(APPEND asm_srcs ${rc4_asm_srcs})
+  ##########
+  set(sha_asm_srcs
+    ${asmDir}/sha/keccak1600-x86_64.${asmExt}
+    ${asmDir}/sha/sha1-mb-x86_64.${asmExt}
+    ${asmDir}/sha/sha1-x86_64.${asmExt}
+    ${asmDir}/sha/sha256-mb-x86_64.${asmExt}
+    ${asmDir}/sha/sha256-x86_64.${asmExt}
+    ${asmDir}/sha/sha512-x86_64.${asmExt}
+    )
+  source_group(sha\\asm FILES ${sha_asm_srcs})
+  list(APPEND asm_srcs ${sha_asm_srcs})
+  ##########
+  set(whrlpool_asm_srcs
+    ${asmDir}/whrlpool/wp-x86_64.${asmExt}
+    )
+  source_group(whrlpool\\asm FILES ${whrlpool_asm_srcs})
+  list(APPEND asm_srcs ${whrlpool_asm_srcs})
+  ##########
+  list(APPEND ${lib_name}_libsrcs ${asm_srcs})
+endif()
+########################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PRIVATE
+  ${CMAKE_CURRENT_BINARY_DIR} # buildinf.h
+  ${CMAKE_CURRENT_SOURCE_DIR} # arm_arch.h
+  ec/curve448
+  ec/curve448/arch_32
+  modes # evp includes modes_lcl.h
+  PUBLIC
+  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include${verDir}>
+  )
+target_compile_definitions(${lib_name} PUBLIC $<INSTALL_INTERFACE:OPENSSL_API_COMPAT=0x10100000L>)
+set(THREADS_PREFER_PTHREAD_FLAG ON)
+find_package(Threads REQUIRED)
+target_link_libraries(${lib_name} PUBLIC $<BUILD_INTERFACE:include> PRIVATE Threads::Threads ${CMAKE_DL_LIBS})
+include(CheckLibraryExists)
+check_library_exists(ws2_32 getch "" CRYPTO_HAS_WS2_32)
+if(CRYPTO_HAS_WS2_32)
+  target_link_libraries(${lib_name} PRIVATE ws2_32)
+endif()
+set_target_properties(${lib_name} PROPERTIES OUTPUT_NAME ${lib_name}${ver})
+########################################
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  )
+########################################
+list(APPEND ${lib_name}_all ${${lib_name}_libsrcs})
+list(REMOVE_ITEM ${lib_name}_all
+  ${CMAKE_CURRENT_BINARY_DIR}/buildinf.h
+  )
+compareCmakeFilesys("${${lib_name}_all}")
diff --git a/crypto/buildinf.h.cmake.in b/crypto/buildinf.h.cmake.in
new file mode 100644
index 0000000000..8ff8bde686
--- /dev/null
+++ b/crypto/buildinf.h.cmake.in
@@ -0,0 +1,23 @@
+/*
+ * WARNING: do not edit!
+ * Generated by CMakeLists.txt from crypto/buildinf.h.cmake.in
+ * (cmake version of util/mkbuildinf.pl)
+ *
+ * Copyright 2014-2017 The OpenSSL Project Authors. All Rights Reserved.
+ *
+ * Licensed under the OpenSSL license (the "License").  You may not use
+ * this file except in compliance with the License.  You can obtain a copy
+ * in the file LICENSE in the source distribution or at
+ * https://www.openssl.org/source/license.html
+ */
+
+#define PLATFORM "platform: @BUILDINF_PLATFORM@"
+#define DATE "built on: @BUILDINF_DATE@"
+
+/*
+ * Generate compiler_flags as an array of individual characters. This is a
+ * workaround for the situation where CFLAGS gets too long for a C90 string
+ * literal
+ */
+static const char compiler_flags[] = {@BUILDINF_COMPILER_FLAGS@
+};
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
new file mode 100644
index 0000000000..6e04c447cf
--- /dev/null
+++ b/include/CMakeLists.txt
@@ -0,0 +1,322 @@
+set(lib_name include)
+########################################
+# cmake-generate openssl/opensslconf.h
+set(INSERT_WARNING
+  "WARNING: do not edit!\n * Generated by CMakeLists.txt from include/openssl/opensslconf.h.cmake.in"
+  )
+##########
+# ./configure; perl configdata.pm --dump
+# Disable features
+set(OPENSSL_DEFINES
+  #OPENSSL_NO_COMP
+  #OPENSSL_NO_MD2
+  #OPENSSL_NO_RC5
+  OPENSSL_THREADS
+  OPENSSL_RAND_SEED_OS
+  OPENSSL_NO_AFALGENG
+  OPENSSL_NO_ASAN
+  OPENSSL_NO_CRYPTO_MDEBUG
+  OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
+  OPENSSL_NO_DEVCRYPTOENG
+  OPENSSL_NO_EC_NISTP_64_GCC_128
+  OPENSSL_NO_EGD
+  OPENSSL_NO_EXTERNAL_TESTS
+  OPENSSL_NO_FUZZ_AFL
+  OPENSSL_NO_FUZZ_LIBFUZZER
+  OPENSSL_NO_HEARTBEATS
+  OPENSSL_NO_MSAN
+  OPENSSL_NO_SCTP
+  OPENSSL_NO_SSL_TRACE
+  OPENSSL_NO_SSL3
+  OPENSSL_NO_SSL3_METHOD
+  OPENSSL_NO_UBSAN
+  OPENSSL_NO_UNIT_TEST
+  OPENSSL_NO_WEAK_SSL_CIPHERS
+  #OPENSSL_NO_DYNAMIC_ENGINE
+  OPENSSL_NO_STATIC_ENGINE
+  )
+foreach(def ${OPENSSL_DEFINES})
+  set(INSERT_DEFINES "${INSERT_DEFINES}#ifndef ${def}\n# define ${def}\n#endif\n")
+endforeach()
+##########
+if(CMAKE_SYSTEM_PROCESSOR STREQUAL i386)
+  set(INSERT_I386 define)
+else()
+  set(INSERT_I386 undef)
+endif()
+##########
+include(CheckIncludeFile)
+check_include_file(unistd.h HAS_UNISTD_H_OSSL)
+if(HAS_UNISTD_H_OSSL)
+  set(INSERT_UNISTD <unistd.h>)
+else()
+  set(INSERT_UNISTD <unknown.h>)
+endif()
+##########
+if(TRUE)
+  set(INSERT_EXPORT_VAR_AS_FN undef)
+  set(INSERT_BN_LLONG undef)
+else()
+  set(INSERT_EXPORT_VAR_AS_FN define)
+  set(INSERT_BN_LLONG define)
+endif()
+##########
+# only one for the following should be defined
+# TRICKY matches crypto/bn_conf.h
+if(WIN32)
+  set(INSERT_SIXTY_FOUR_BIT_LONG undef)
+  set(INSERT_SIXTY_FOUR_BIT define)
+elseif(UNIX)
+  set(INSERT_SIXTY_FOUR_BIT_LONG define)
+  set(INSERT_SIXTY_FOUR_BIT undef)
+endif()
+set(INSERT_THIRTY_TWO_BIT undef)
+##########
+set(INSERT_RC4_INT "unsigned int")
+##########
+configure_file(openssl/opensslconf.h.cmake.in openssl/opensslconf.h @ONLY)
+# copy root header to CMAKE_CURRENT_BINARY_DIR
+configure_file(${CMAKE_SOURCE_DIR}/e_os.h e_os.h COPYONLY)
+########################################
+set(conf_file crypto/bn_conf.h)
+set(INSERT_WARNING
+  "/* WARNING: do not edit! */\n/* Generated by CMakeLists.txt from include/crypto/${conf_file}.cmake.in */"
+  )
+# only one for the following should be defined
+if(WIN32)
+  set(INSERT_SIXTY_FOUR_BIT_LONG undef)
+  set(INSERT_SIXTY_FOUR_BIT define)
+elseif(UNIX)
+  set(INSERT_SIXTY_FOUR_BIT_LONG define)
+  set(INSERT_SIXTY_FOUR_BIT undef)
+endif()
+set(INSERT_THIRTY_TWO_BIT undef)
+configure_file(${conf_file}.cmake.in ${conf_file} @ONLY)
+##########
+set(conf_file crypto/dso_conf.h)
+set(INSERT_WARNING
+  "/* WARNING: do not edit! */\n/* Generated by CMakeLists.txt from include/crypto/${conf_file}.cmake.in */"
+  )
+if(WIN32)
+  set(DSO_SCHEME_MACROS
+    DSO_WIN32
+    )
+elseif(UNIX)
+  set(DSO_SCHEME_MACROS
+    DSO_DLFCN
+    HAVE_DLFCN_H
+    )
+endif()
+foreach(mac ${DSO_SCHEME_MACROS})
+  set(INSERT_DSO_SCHEME_MACROS "${INSERT_DSO_SCHEME_MACROS}\n# define ${mac}")
+endforeach()
+set(INSERT_DSO_EXTENSION ${CMAKE_SHARED_LIBRARY_SUFFIX})
+configure_file(${conf_file}.cmake.in ${conf_file} @ONLY)
+########################################
+set(crypto_srcs
+  crypto/aria.h
+  crypto/asn1.h
+  crypto/async.h
+  crypto/bn.h
+  crypto/bn_conf.h.cmake.in
+  crypto/bn_conf.h.in
+  crypto/bn_dh.h
+  crypto/bn_srp.h
+  crypto/chacha.h
+  crypto/cryptlib.h
+  crypto/ctype.h
+  crypto/__DECC_INCLUDE_EPILOGUE.H
+  crypto/__DECC_INCLUDE_PROLOGUE.H
+  crypto/dso_conf.h.cmake.in
+  crypto/dso_conf.h.in
+  crypto/ec.h
+  crypto/engine.h
+  crypto/err.h
+  crypto/evp.h
+  crypto/lhash.h
+  crypto/md32_common.h
+  crypto/objects.h
+  crypto/poly1305.h
+  crypto/rand.h
+  crypto/sha.h
+  crypto/siphash.h
+  crypto/sm2.h
+  crypto/sm2err.h
+  crypto/sm3.h
+  crypto/sm4.h
+  crypto/store.h
+  crypto/x509.h
+  ${CMAKE_CURRENT_BINARY_DIR}/crypto/bn_conf.h
+  ${CMAKE_CURRENT_BINARY_DIR}/crypto/dso_conf.h
+  )
+source_group(crypto FILES ${crypto_srcs})
+list(APPEND ${lib_name}_libsrcs ${crypto_srcs})
+########################################
+set(internal_srcs
+  internal/bio.h
+  internal/comp.h
+  internal/conf.h
+  internal/constant_time.h
+  internal/cryptlib.h
+  internal/dane.h
+  internal/__DECC_INCLUDE_EPILOGUE.H
+  internal/__DECC_INCLUDE_PROLOGUE.H
+  internal/dsoerr.h
+  internal/dso.h
+  internal/err.h
+  internal/nelem.h
+  internal/numbers.h
+  internal/o_dir.h
+  internal/o_str.h
+  internal/refcount.h
+  internal/sockets.h
+  internal/sslconf.h
+  internal/thread_once.h
+  internal/tsan_assist.h
+  ${CMAKE_CURRENT_BINARY_DIR}/e_os.h
+  )
+source_group(internal FILES ${internal_srcs})
+list(APPEND ${lib_name}_libsrcs ${internal_srcs})
+########################################
+set(openssl_srcs
+  openssl/aes.h
+  openssl/asn1err.h
+  openssl/asn1.h
+  openssl/asn1_mac.h
+  openssl/asn1t.h
+  openssl/asyncerr.h
+  openssl/async.h
+  openssl/bioerr.h
+  openssl/bio.h
+  openssl/blowfish.h
+  openssl/bnerr.h
+  openssl/bn.h
+  openssl/buffererr.h
+  openssl/buffer.h
+  openssl/camellia.h
+  openssl/cast.h
+  openssl/cmac.h
+  openssl/cmserr.h
+  openssl/cms.h
+  openssl/comperr.h
+  openssl/comp.h
+  openssl/conf_api.h
+  openssl/conferr.h
+  openssl/conf.h
+  openssl/cryptoerr.h
+  openssl/crypto.h
+  openssl/cterr.h
+  openssl/ct.h
+  openssl/__DECC_INCLUDE_EPILOGUE.H
+  openssl/__DECC_INCLUDE_PROLOGUE.H
+  openssl/des.h
+  openssl/dherr.h
+  openssl/dh.h
+  openssl/dsaerr.h
+  openssl/dsa.h
+  openssl/dtls1.h
+  openssl/ebcdic.h
+  openssl/ecdh.h
+  openssl/ecdsa.h
+  openssl/ecerr.h
+  openssl/ec.h
+  openssl/engineerr.h
+  openssl/engine.h
+  openssl/e_os2.h
+  openssl/err.h
+  openssl/evperr.h
+  openssl/evp.h
+  openssl/hmac.h
+  openssl/idea.h
+  openssl/kdferr.h
+  openssl/kdf.h
+  openssl/lhash.h
+  openssl/md2.h
+  openssl/md4.h
+  openssl/md5.h
+  openssl/mdc2.h
+  openssl/modes.h
+  openssl/objectserr.h
+  openssl/objects.h
+  openssl/obj_mac.h
+  openssl/ocsperr.h
+  openssl/ocsp.h
+  openssl/opensslconf.h.cmake.in
+  openssl/opensslconf.h.in
+  openssl/opensslv.h
+  openssl/ossl_typ.h
+  openssl/pem2.h
+  openssl/pemerr.h
+  openssl/pem.h
+  openssl/pkcs12err.h
+  openssl/pkcs12.h
+  openssl/pkcs7err.h
+  openssl/pkcs7.h
+  openssl/rand_drbg.h
+  openssl/randerr.h
+  openssl/rand.h
+  openssl/rc2.h
+  openssl/rc4.h
+  openssl/rc5.h
+  openssl/ripemd.h
+  openssl/rsaerr.h
+  openssl/rsa.h
+  openssl/safestack.h
+  openssl/seed.h
+  openssl/sha.h
+  openssl/srp.h
+  openssl/srtp.h
+  openssl/ssl2.h
+  openssl/ssl3.h
+  openssl/sslerr.h
+  openssl/ssl.h
+  openssl/stack.h
+  openssl/storeerr.h
+  openssl/store.h
+  openssl/symhacks.h
+  openssl/tls1.h
+  openssl/tserr.h
+  openssl/ts.h
+  openssl/txt_db.h
+  openssl/uierr.h
+  openssl/ui.h
+  openssl/whrlpool.h
+  openssl/x509err.h
+  openssl/x509.h
+  openssl/x509v3err.h
+  openssl/x509v3.h
+  openssl/x509_vfy.h
+  ${CMAKE_CURRENT_BINARY_DIR}/openssl/opensslconf.h
+  )
+source_group(openssl FILES ${openssl_srcs})
+list(APPEND ${lib_name}_libsrcs ${openssl_srcs})
+########################################
+add_library(${lib_name} INTERFACE)
+if(FALSE)
+# TODO: it appears cmake 3.13 has a fix for the target_sources() call to work
+# https://cmake.org/pipermail/cmake/2016-July/063896.html
+target_sources(${lib_name} INTERFACE ${${lib_name}_libsrcs})
+else()
+add_custom_target(${lib_name}Sources SOURCES ${${lib_name}_libsrcs})
+endif()
+target_include_directories(${lib_name} INTERFACE
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> # e_os.h, openssl/opensslconf.h, crypto/[bn|dso]_conf.h
+  )
+# don't install the following...
+list(REMOVE_ITEM openssl_srcs
+  openssl/__DECC_INCLUDE_EPILOGUE.H
+  openssl/__DECC_INCLUDE_PROLOGUE.H
+  openssl/opensslconf.h.cmake.in
+  openssl/opensslconf.h.in
+  )
+install(FILES ${openssl_srcs} DESTINATION include${verDir}/${PROJECT_NAME})
+########################################
+list(APPEND ${lib_name}_libsrcs CMakeLists.txt)
+list(REMOVE_ITEM ${lib_name}_libsrcs
+  ${CMAKE_CURRENT_BINARY_DIR}/e_os.h
+  ${CMAKE_CURRENT_BINARY_DIR}/crypto/bn_conf.h
+  ${CMAKE_CURRENT_BINARY_DIR}/crypto/dso_conf.h
+  ${CMAKE_CURRENT_BINARY_DIR}/openssl/opensslconf.h
+  )
+compareCmakeFilesys("${${lib_name}_libsrcs}")
diff --git a/include/crypto/bn_conf.h.cmake.in b/include/crypto/bn_conf.h.cmake.in
new file mode 100644
index 0000000000..6faeca9b52
--- /dev/null
+++ b/include/crypto/bn_conf.h.cmake.in
@@ -0,0 +1,27 @@
+@INSERT_WARNING@
+/*
+ * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
+ *
+ * Licensed under the OpenSSL license (the "License").  You may not use
+ * this file except in compliance with the License.  You can obtain a copy
+ * in the file LICENSE in the source distribution or at
+ * https://www.openssl.org/source/license.html
+ */
+
+#ifndef HEADER_BN_CONF_H
+# define HEADER_BN_CONF_H
+
+/*
+ * The contents of this file are not used in the UEFI build, as
+ * both 32-bit and 64-bit builds are supported from a single run
+ * of the Configure script.
+ */
+
+/* Should we define BN_DIV2W here? */
+
+/* Only one for the following should be defined */
+#@INSERT_SIXTY_FOUR_BIT_LONG@ SIXTY_FOUR_BIT_LONG
+#@INSERT_SIXTY_FOUR_BIT@ SIXTY_FOUR_BIT
+#@INSERT_THIRTY_TWO_BIT@ THIRTY_TWO_BIT
+
+#endif
diff --git a/include/crypto/dso_conf.h.cmake.in b/include/crypto/dso_conf.h.cmake.in
new file mode 100644
index 0000000000..cf6f04faa7
--- /dev/null
+++ b/include/crypto/dso_conf.h.cmake.in
@@ -0,0 +1,14 @@
+@INSERT_WARNING@
+/*
+ * Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.
+ *
+ * Licensed under the OpenSSL license (the "License").  You may not use
+ * this file except in compliance with the License.  You can obtain a copy
+ * in the file LICENSE in the source distribution or at
+ * https://www.openssl.org/source/license.html
+ */
+
+#ifndef HEADER_DSO_CONF_H
+# define HEADER_DSO_CONF_H@INSERT_DSO_SCHEME_MACROS@
+# define DSO_EXTENSION "@INSERT_DSO_EXTENSION@"
+#endif
diff --git a/include/openssl/opensslconf.h.cmake.in b/include/openssl/opensslconf.h.cmake.in
new file mode 100644
index 0000000000..1782ddd7e2
--- /dev/null
+++ b/include/openssl/opensslconf.h.cmake.in
@@ -0,0 +1,122 @@
+/*
+ * @INSERT_WARNING@
+ *
+ * Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.
+ *
+ * Licensed under the OpenSSL license (the "License").  You may not use
+ * this file except in compliance with the License.  You can obtain a copy
+ * in the file LICENSE in the source distribution or at
+ * https://www.openssl.org/source/license.html
+ */
+
+#include <openssl/opensslv.h>
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#ifdef OPENSSL_ALGORITHM_DEFINES
+# error OPENSSL_ALGORITHM_DEFINES no longer supported
+#endif
+
+/*
+ * OpenSSL was configured with the following options:
+ */
+
+@INSERT_DEFINES@
+
+/*
+ * Sometimes OPENSSSL_NO_xxx ends up with an empty file and some compilers
+ * don't like that.  This will hopefully silence them.
+ */
+#define NON_EMPTY_TRANSLATION_UNIT static void *dummy = &dummy;
+
+/*
+ * Applications should use -DOPENSSL_API_COMPAT=<version> to suppress the
+ * declarations of functions deprecated in or before <version>. Otherwise, they
+ * still won't see them if the library has been built to disable deprecated
+ * functions.
+ */
+#ifndef DECLARE_DEPRECATED
+# define DECLARE_DEPRECATED(f)   f;
+# ifdef __GNUC__
+#  if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ > 0)
+#   undef DECLARE_DEPRECATED
+#   define DECLARE_DEPRECATED(f)    f __attribute__ ((deprecated));
+#  endif
+# endif
+#endif
+
+#ifndef OPENSSL_FILE
+# ifdef OPENSSL_NO_FILENAMES
+#  define OPENSSL_FILE ""
+#  define OPENSSL_LINE 0
+# else
+#  define OPENSSL_FILE __FILE__
+#  define OPENSSL_LINE __LINE__
+# endif
+#endif
+
+#ifndef OPENSSL_MIN_API
+# define OPENSSL_MIN_API 0
+#endif
+
+#if !defined(OPENSSL_API_COMPAT) || OPENSSL_API_COMPAT < OPENSSL_MIN_API
+# undef OPENSSL_API_COMPAT
+# define OPENSSL_API_COMPAT OPENSSL_MIN_API
+#endif
+
+/*
+ * Do not deprecate things to be deprecated in version 1.2.0 before the
+ * OpenSSL version number matches.
+ */
+#if OPENSSL_VERSION_NUMBER < 0x10200000L
+# define DEPRECATEDIN_1_2_0(f)   f;
+#elif OPENSSL_API_COMPAT < 0x10200000L
+# define DEPRECATEDIN_1_2_0(f)   DECLARE_DEPRECATED(f)
+#else
+# define DEPRECATEDIN_1_2_0(f)
+#endif
+
+#if OPENSSL_API_COMPAT < 0x10100000L
+# define DEPRECATEDIN_1_1_0(f)   DECLARE_DEPRECATED(f)
+#else
+# define DEPRECATEDIN_1_1_0(f)
+#endif
+
+#if OPENSSL_API_COMPAT < 0x10000000L
+# define DEPRECATEDIN_1_0_0(f)   DECLARE_DEPRECATED(f)
+#else
+# define DEPRECATEDIN_1_0_0(f)
+#endif
+
+#if OPENSSL_API_COMPAT < 0x00908000L
+# define DEPRECATEDIN_0_9_8(f)   DECLARE_DEPRECATED(f)
+#else
+# define DEPRECATEDIN_0_9_8(f)
+#endif
+
+/* Generate 80386 code? */
+#@INSERT_I386@ I386_ONLY
+
+#undef OPENSSL_UNISTD
+#define OPENSSL_UNISTD @INSERT_UNISTD@
+
+#@INSERT_EXPORT_VAR_AS_FN@ OPENSSL_EXPORT_VAR_AS_FUNCTION
+
+/*
+ * The following are cipher-specific, but are part of the public API.
+ */
+#if !defined(OPENSSL_SYS_UEFI)
+# @INSERT_BN_LLONG@ BN_LLONG
+/* Only one for the following should be defined */
+# @INSERT_SIXTY_FOUR_BIT_LONG@ SIXTY_FOUR_BIT_LONG
+# @INSERT_SIXTY_FOUR_BIT@ SIXTY_FOUR_BIT
+# @INSERT_THIRTY_TWO_BIT@ THIRTY_TWO_BIT
+#endif
+
+#define RC4_INT @INSERT_RC4_INT@
+
+#ifdef  __cplusplus
+}
+#endif
diff --git a/ssl/CMakeLists.txt b/ssl/CMakeLists.txt
new file mode 100644
index 0000000000..53810c352e
--- /dev/null
+++ b/ssl/CMakeLists.txt
@@ -0,0 +1,97 @@
+set(lib_name ssl)
+########################################
+# root
+set(root_srcs # order from ssl/build.info
+  build.info
+  pqueue.c
+  packet.c
+  s3_lib.c
+  s3_enc.c
+  s3_cbc.c
+  s3_msg.c
+  methods.c
+  t1_lib.c
+  t1_enc.c
+  tls13_enc.c
+  d1_lib.c
+  d1_msg.c
+  d1_srtp.c
+  ssl_lib.c
+  ssl_cert.c
+  ssl_sess.c
+  ssl_ciph.c
+  ssl_stat.c
+  ssl_rsa.c
+  ssl_asn1.c
+  ssl_txt.c
+  ssl_init.c
+  ssl_conf.c
+  ssl_mcnf.c
+  bio_ssl.c
+  ssl_err.c
+  tls_srp.c
+  t1_trce.c
+  ssl_utst.c
+  )
+list(APPEND root_srcs
+  packet_local.h
+  ssl_cert_table.h
+  ssl_local.h
+  )
+source_group("" FILES ${root_srcs})
+list(APPEND ${lib_name}_libsrcs ${root_srcs})
+##########
+set(root_extra # in directory, not in build.info
+  CMakeLists.txt
+  )
+list(APPEND ${lib_name}_all ${root_extra})
+####################
+# record
+set(record_srcs # order from ssl/build.info
+  record/rec_layer_s3.c
+  record/rec_layer_d1.c
+  record/ssl3_buffer.c
+  record/ssl3_record.c
+  record/dtls1_bitmap.c
+  record/ssl3_record_tls13.c
+  )
+list(APPEND record_srcs
+  record/README
+  record/record.h
+  record/record_local.h
+  )
+source_group(record FILES ${record_srcs})
+list(APPEND ${lib_name}_libsrcs ${record_srcs})
+####################
+# statem
+set(statem_srcs # order from ssl/build.info
+  statem/statem_srvr.c
+  statem/statem_clnt.c
+  statem/statem_lib.c
+  statem/extensions.c
+  statem/extensions_srvr.c
+  statem/extensions_clnt.c
+  statem/extensions_cust.c
+  statem/statem_dtls.c
+  statem/statem.c
+  )
+list(APPEND statem_srcs
+  statem/README
+  statem/statem.h
+  statem/statem_local.h
+  )
+source_group(statem FILES ${statem_srcs})
+list(APPEND ${lib_name}_libsrcs ${statem_srcs})
+########################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_link_libraries(${lib_name} PUBLIC crypto)
+set_target_properties(${lib_name} PROPERTIES OUTPUT_NAME ${lib_name}${ver})
+########################################
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  )
+########################################
+list(APPEND ${lib_name}_all ${${lib_name}_libsrcs})
+compareCmakeFilesys("${${lib_name}_all}")
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
new file mode 100644
index 0000000000..6e161ba5f6
--- /dev/null
+++ b/test/CMakeLists.txt
@@ -0,0 +1,341 @@
+set(folder test)
+########################################
+# tests that depend on include
+foreach(t
+  rsa_complex
+  shlibloadtest
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE include)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+target_link_libraries(shlibloadtest PRIVATE ${CMAKE_DL_LIBS})
+########################################
+# tests that depend on crypto
+foreach(t
+  aborttest
+  asynctest
+  versions
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE crypto)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+########################################
+# tests that depend on ssl
+foreach(t
+  ssltest_old
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE ssl)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+########################################
+# testutil library
+set(testutil_srcs
+  testutil/basic_output.c
+  testutil/cb.c
+  testutil/driver.c
+  testutil/format_output.c
+  testutil/main.c
+  testutil/output.h
+  testutil/output_helpers.c
+  testutil/random.c
+  testutil/stanza.c
+  testutil/tap_bio.c
+  testutil/test_cleanup.c
+  testutil/tests.c
+  testutil/testutil_init.c
+  testutil/tu_local.h
+  testutil.h
+  )
+add_library(testutil STATIC ${testutil_srcs})
+target_link_libraries(testutil PUBLIC crypto)
+set_property(TARGET testutil PROPERTY FOLDER ${folder})
+list(APPEND test_srcs ${testutil_srcs})
+########################################
+# tests that depend on testutil
+foreach(t
+  afalgtest
+  asn1_decode_test
+  asn1_encode_test
+  asn1_string_table_test
+  asn1_time_test
+  bftest
+  bio_callback_test
+  bio_enc_test
+  bio_memleak_test
+  bioprinttest
+  bntest
+  casttest
+  cmactest
+  cmsapitest
+  conf_include_test
+  constant_time_test
+  crltest
+  ct_test
+  d2i_test
+  destest
+  dhtest
+  dsa_no_digest_size_test
+  dsatest
+  ecstresstest
+  ectest
+  enginetest
+  errtest
+  exdatatest
+  exptest
+  gmdifftest
+  hmactest
+  ideatest
+  igetest
+  lhash_test
+  md2test
+  mdc2_internal_test
+  mdc2test
+  memleaktest
+  modes_internal_test
+  ocspapitest
+  packettest
+  pbelutest
+  pemtest
+  pkey_meth_kdf_test
+  pkey_meth_test
+  rc2test
+  rc4test
+  rc5test
+  rdrand_sanitytest
+  rsa_mp_test
+  rsa_test
+  sanitytest
+  secmemtest
+  srptest
+  ssl_cert_table_internal_test
+  stack_test
+  test_test
+  threadstest
+  time_offset_test
+  v3ext
+  v3nametest
+  verify_extra_test
+  x509aux
+  x509_check_cert_pkey_test
+  x509_dup_cert_test
+  x509_internal_test
+  x509_time_test
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE testutil)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+########################################
+# tests that depend on testutil/ssl
+foreach(t
+  bad_dtls_test
+  cipherbytes_test
+  cipherlist_test
+  ciphername_test
+  cipher_overhead_test
+  clienthellotest
+  danetest
+  dtlsv1listentest
+  ssl_ctx_test
+  sysdefaulttest
+  tls13encryptiontest
+  wpackettest
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE testutil ssl)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+########################################
+# sshtestlib library
+set(ssltestlib_srcs
+  ssltestlib.c
+  ssltestlib.h
+  )
+add_library(ssltestlib STATIC ${ssltestlib_srcs})
+target_link_libraries(ssltestlib PUBLIC testutil ssl)
+set_property(TARGET ssltestlib PROPERTY FOLDER ${folder})
+list(APPEND test_srcs ${ssltestlib_srcs})
+####################
+# tests that depend on ssltestlib
+foreach(t
+  asynciotest
+  dtls_mtu_test
+  dtlstest
+  fatalerrtest
+  gosttest
+  recordlentest
+  servername_test
+  sslapitest
+  sslbuffertest
+  sslcorrupttest
+  tls13ccstest
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE ssltestlib)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+########################################
+# tests that depend on testutil
+foreach(t
+  asn1_internal_test
+  chacha_internal_test
+  ctype_internal_test
+  curve448_internal_test
+  ec_internal_test
+  evp_extra_test
+  poly1305_internal_test
+  siphash_internal_test
+  sm2_internal_test
+  sm4_internal_test
+  )
+  add_executable(${t} ${t}.c)
+  target_link_libraries(${t} PRIVATE testutil)
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${t}.c)
+endforeach()
+target_include_directories(curve448_internal_test PRIVATE ${CMAKE_SOURCE_DIR}/crypto/ec/curve448)
+target_include_directories(ec_internal_test PRIVATE ${CMAKE_SOURCE_DIR}/crypto/ec)
+########################################
+# tests with multiple sources
+set(drbgtest_srcs
+  drbgtest.c
+  drbgtest.h
+  )
+set(drbgtest_libs testutil)
+##########
+set(drbg_cavs_test_srcs
+  drbg_cavs_data.c
+  drbg_cavs_data.h
+  drbg_cavs_test.c
+  )
+set(drbg_cavs_test_libs testutil)
+##########
+set(ecdsatest_srcs
+  ecdsatest.c
+  ecdsatest.h
+  )
+set(ecdsatest_libs testutil)
+##########
+set(evp_test_srcs
+  evp_test.c
+  evp_test.h
+  )
+set(evp_test_libs testutil)
+##########
+set(ssl_test_srcs
+  handshake_helper.c
+  handshake_helper.h
+  ssl_test.c
+  ssl_test_ctx.c
+  ssl_test_ctx.h
+  )
+set(ssl_test_libs testutil ssl)
+##########
+set(ssl_test_ctx_test_srcs
+  ssl_test_ctx.c
+  ssl_test_ctx.h
+  ssl_test_ctx_test.c
+  ssl_test_ctx_test.conf
+  )
+set(ssl_test_ctx_test_libs testutil ssl)
+##########
+foreach(t
+  drbgtest
+  drbg_cavs_test
+  ecdsatest
+  evp_test
+  ssl_test
+  ssl_test_ctx_test
+  )
+  add_executable(${t} ${${t}_srcs})
+  target_link_libraries(${t} PRIVATE ${${t}_libs})
+  set_property(TARGET ${t} PROPERTY FOLDER ${folder})
+  list(APPEND test_srcs ${${t}_srcs})
+endforeach()
+########################################
+# extra sources (not part of build)
+list(APPEND test_srcs
+  bntests.pl
+  build.info
+  CAss.cnf
+  CAssdh.cnf
+  CAssdsa.cnf
+  CAssrsa.cnf
+  CAtsa.cnf
+  CMakeLists.txt
+  cms-examples.pl
+  danetest.in
+  danetest.pem
+  generate_buildtest.pl
+  generate_ssl_tests.pl
+  P1ss.cnf
+  P2ss.cnf
+  pkcs7-1.pem
+  pkcs7.pem
+  pkits-test.pl
+  README
+  README.external
+  README.ssltest.md
+  run_tests.pl
+  serverinfo2.pem
+  serverinfo.pem
+  session.pem
+  shibboleth.pfx
+  smcont.txt
+  ssl_test.tmpl
+  Sssdsa.cnf
+  Sssrsa.cnf
+  sysdefault.cnf
+  test.cnf
+  testcrl.pem
+  testdsa.pem
+  testdsapub.pem
+  testec-p256.pem
+  testecpub-p256.pem
+  tested25519.pem
+  tested25519pub.pem
+  tested448.pem
+  tested448pub.pem
+  testp7.pem
+  testreq2.pem
+  testrsa.pem
+  testrsapub.pem
+  testsid.pem
+  testx509.pem
+  Uss.cnf
+  v3-cert1.pem
+  v3-cert2.pem
+  )
+########################################
+# directories (ignore -- add to cmake)
+foreach(d
+  certs
+  ct
+  d2i-tests
+  ocsp-tests
+  ossl_shim
+  recipes
+  smime-certs
+  ssl-tests
+  )
+  file(GLOB_RECURSE dir RELATIVE ${CMAKE_CURRENT_LIST_DIR} ${d}/*)
+  list(APPEND test_srcs ${dir})
+endforeach()
+########################################
+set(TODO # build.info shows instructions
+  tls13secretstest.c
+  uitest.c
+  )
+list(APPEND test_srcs ${TODO})
+########################################
+list(REMOVE_DUPLICATES test_srcs)
+compareCmakeFilesys("${test_srcs}")
