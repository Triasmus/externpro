diff --git a/src/options_description.cpp b/src/options_description.cpp
index 6592a5d..44fbb6a 100644
--- a/src/options_description.cpp
+++ b/src/options_description.cpp
@@ -11,6 +11,7 @@
 // FIXME: this is only to get multiple_occurrences class
 // should move that to a separate headers.
 #include <boost/program_options/parsers.hpp>
+#include <boost/smart_ptr/make_shared.hpp>
 
 
 #include <boost/lexical_cast.hpp>
@@ -50,7 +51,7 @@ namespace boost { namespace program_options {
     
     option_description::
     option_description(const char* name,
-                       const value_semantic* s)
+                       shared_ptr<const value_semantic> s)
     : m_value_semantic(s)
     {
         this->set_name(name);
@@ -59,7 +60,7 @@ namespace boost { namespace program_options {
 
     option_description::
     option_description(const char* name,
-                       const value_semantic* s,
+                       shared_ptr<const value_semantic> s,
                        const char* description)
     : m_description(description), m_value_semantic(s)
     {
@@ -231,7 +232,7 @@ namespace boost { namespace program_options {
         // no value can be specified on command line.
         // FIXME: does not look exception-safe
         shared_ptr<option_description> d(
-            new option_description(name, new untyped_value(true), description));
+            new option_description(name, boost::make_shared<untyped_value>(true), description));
 
         owner->add(d);
         return *this;
@@ -240,7 +241,7 @@ namespace boost { namespace program_options {
     options_description_easy_init&
     options_description_easy_init::
     operator()(const char* name,
-               const value_semantic* s)
+               shared_ptr<const value_semantic> s)
     {
         shared_ptr<option_description> d(new option_description(name, s));
         owner->add(d);
@@ -250,7 +251,7 @@ namespace boost { namespace program_options {
     options_description_easy_init&
     options_description_easy_init::
     operator()(const char* name,
-               const value_semantic* s,
+               shared_ptr<const value_semantic> s,
                const char* description)
     {
         shared_ptr<option_description> d(new option_description(name, s, description));
@@ -258,6 +259,23 @@ namespace boost { namespace program_options {
         owner->add(d);
         return *this;
     }
+    
+    options_description_easy_init&
+    options_description_easy_init::
+    operator()(const char* name,
+               const value_semantic* s)
+    {
+        return (*this)(name, shared_ptr<const value_semantic>(s));
+    }
+
+    options_description_easy_init&
+    options_description_easy_init::
+    operator()(const char* name,
+               const value_semantic* s,
+               const char* description)
+    {
+        return (*this)(name, shared_ptr<const value_semantic>(s), description);
+    }
 
     const unsigned options_description::m_default_line_length = 80;
 
diff --git a/src/value_semantic.cpp b/src/value_semantic.cpp
index a7366d4..4920431 100644
--- a/src/value_semantic.cpp
+++ b/src/value_semantic.cpp
@@ -8,6 +8,7 @@
 #include <boost/program_options/value_semantic.hpp>
 #include <boost/program_options/detail/convert.hpp>
 #include <boost/program_options/detail/cmdline.hpp>
+#include <boost/smart_ptr/make_shared.hpp>
 #include <set>
 
 #include <cctype>
@@ -121,16 +122,16 @@ namespace boost { namespace program_options {
         value_store = new_tokens.empty() ? std::string("") : new_tokens.front();
     }
 
-    BOOST_PROGRAM_OPTIONS_DECL typed_value<bool>*
+    BOOST_PROGRAM_OPTIONS_DECL shared_ptr<typed_value<bool> >
     bool_switch()
     {
         return bool_switch(0);
     }
 
-    BOOST_PROGRAM_OPTIONS_DECL typed_value<bool>*
+    BOOST_PROGRAM_OPTIONS_DECL shared_ptr<typed_value<bool> >
     bool_switch(bool* v)
     {
-        typed_value<bool>* r = new typed_value<bool>(v);
+        shared_ptr<typed_value<bool> > r = boost::make_shared<typed_value<bool> >(v);
         r->default_value(0);
         r->zero_tokens();
 
diff --git a/test/cmdline_test.cpp b/test/cmdline_test.cpp
index e971819..076edc4 100644
--- a/test/cmdline_test.cpp
+++ b/test/cmdline_test.cpp
@@ -71,7 +71,7 @@ void apply_syntax(options_description& desc,
     stringstream ss;
     ss << syntax;
     while(ss >> s) {
-        value_semantic* v = 0;
+        boost::shared_ptr<value_semantic> v;
         
         if (*(s.end()-1) == '=') {
             v = value<string>();
diff --git a/test/options_description_test.cpp b/test/options_description_test.cpp
index 42365e9..22d2ea8 100644
--- a/test/options_description_test.cpp
+++ b/test/options_description_test.cpp
@@ -8,6 +8,7 @@
 using namespace boost::program_options;
 
 #include <boost/function.hpp>
+#include <boost/smart_ptr/make_shared.hpp>
 using namespace boost;
 
 #include <utility>
@@ -42,12 +43,12 @@ void test_approximation()
 {
     options_description desc;
     desc.add_options()
-        ("foo", new untyped_value())
-        ("fee", new untyped_value())
-        ("baz", new untyped_value())
-        ("all-chroots", new untyped_value())
-        ("all-sessions", new untyped_value())
-        ("all", new untyped_value())
+        ("foo",  boost::make_shared<untyped_value>())
+        ("fee", boost::make_shared<untyped_value>())
+        ("baz", boost::make_shared<untyped_value>())
+        ("all-chroots", boost::make_shared<untyped_value>())
+        ("all-sessions", boost::make_shared<untyped_value>())
+        ("all", boost::make_shared<untyped_value>())
         ;
 
     BOOST_CHECK_EQUAL(desc.find("fo", true).long_name(), "foo");
@@ -79,16 +80,16 @@ void test_formatting()
     // Long option descriptions used to crash on MSVC-8.0.
     options_description desc;
     desc.add_options()(
-        "test", new untyped_value(),
+        "test", boost::make_shared<untyped_value>(),
         "foo foo foo foo foo foo foo foo foo foo foo foo foo foo"
         "foo foo foo foo foo foo foo foo foo foo foo foo foo foo"
         "foo foo foo foo foo foo foo foo foo foo foo foo foo foo"
         "foo foo foo foo foo foo foo foo foo foo foo foo foo foo")
-      ("list", new untyped_value(),
+      ("list", boost::make_shared<untyped_value>(),
          "a list:\n      \t"
              "item1, item2, item3, item4, item5, item6, item7, item8, item9, "
              "item10, item11, item12, item13, item14, item15, item16, item17, item18")
-      ("well_formated", new untyped_value(), 
+      ("well_formated", boost::make_shared<untyped_value>(), 
                         "As you can see this is a very well formatted option description.\n"
                         "You can do this for example:\n\n"
                         "Values:\n"
@@ -131,9 +132,9 @@ void test_formatting_description_length()
                                  options_description::m_default_line_length,
                                  options_description::m_default_line_length / 2U);
         desc.add_options()
-            ("an-option-that-sets-the-max", new untyped_value(), // > 40 available for desc
+            ("an-option-that-sets-the-max", boost::make_shared<untyped_value>(), // > 40 available for desc
             "this description sits on the same line, but wrapping should still work correctly")
-            ("a-long-option-that-would-leave-very-little-space-for-description", new untyped_value(),
+            ("a-long-option-that-would-leave-very-little-space-for-description", boost::make_shared<untyped_value>(),
             "the description of the long opt, but placed on the next line\n"
             "    \talso ensure that the tabulation works correctly when a"
             " description size has been set");
@@ -159,7 +160,7 @@ void test_formatting_description_length()
                                  options_description::m_default_line_length,
                                  options_description::m_default_line_length - 10U); // leaves < 23 (default option space)
         desc.add_options()
-            ("an-option-that-encroaches-description", new untyped_value(),
+            ("an-option-that-encroaches-description", boost::make_shared<untyped_value>(),
             "this description should always be placed on the next line, and wrapping should continue as normal");
 
         stringstream ss;
diff --git a/test/parsers_test.cpp b/test/parsers_test.cpp
index cc1bdd3..79ecee8 100644
--- a/test/parsers_test.cpp
+++ b/test/parsers_test.cpp
@@ -245,8 +245,8 @@ void test_environment()
 {
     options_description desc;
     desc.add_options()
-        ("foo", new untyped_value, "")
-        ("bar", new untyped_value, "")
+        ("foo", boost::shared_ptr<untyped_value>(), "")
+        ("bar", boost::shared_ptr<untyped_value>(), "")
         ;
 
 #if defined(_WIN32) && ! defined(__BORLANDC__)
diff --git a/test/unicode_test.cpp b/test/unicode_test.cpp
index ea3acac..dd13113 100644
--- a/test/unicode_test.cpp
+++ b/test/unicode_test.cpp
@@ -107,7 +107,7 @@ void test_command_line()
 {
     options_description desc;
     desc.add_options()
-        ("foo,f", new untyped_value(), "")
+        ("foo,f", boost::make_shared<untyped_value>(), "")
         // Explicit qualification is a workaround for vc6
         ("bar,b", po::value<std::string>(), "")
         ("baz", new untyped_value())
diff --git a/test/variable_map_test.cpp b/test/variable_map_test.cpp
index 04b4347..54e3cad 100644
--- a/test/variable_map_test.cpp
+++ b/test/variable_map_test.cpp
@@ -13,6 +13,7 @@ using namespace boost::program_options;
 namespace po = boost::program_options;
 
 #include <boost/function.hpp>
+#include <boost/smart_ptr/make_shared.hpp>
 using namespace boost;
 
 #include <sstream>
@@ -32,11 +33,11 @@ void test_variable_map()
 {
     options_description desc;
     desc.add_options()
-        ("foo,f", new untyped_value)
+        ("foo,f", boost::make_shared<untyped_value>())
         ("bar,b", po::value<string>())
         ("biz,z", po::value<string>())
-        ("baz", new untyped_value())
-        ("output,o", new untyped_value(), "")
+        ("baz", boost::make_shared<untyped_value>())
+        ("output,o", boost::make_shared<untyped_value>(), "")
         ;
     const char* cmdline3_[] = { "--foo='12'", "--bar=11", "-z3", "-ofoo" };
     vector<string> cmdline3 = sv(cmdline3_,
@@ -124,7 +125,7 @@ void test_semantic_values()
 {
     options_description desc;
     desc.add_options()
-    ("foo", new untyped_value())
+    ("foo", boost::make_shared<untyped_value>())
     ("bar", po::value<int>())
     ("biz", po::value< vector<string> >())
     ("baz", po::value< vector<string> >()->multitoken())
