diff --git a/CMakeLists.txt b/CMakeLists.txt
index ae55942..9f58758 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -35,11 +35,16 @@
 
 cmake_minimum_required(VERSION 2.8.11)
 
-set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+if(DEFINED CMAKE_MODULE_PATH)
+  list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+else()
+  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+endif()
 
 project(libssh2 C)
 set(PROJECT_URL "https://www.libssh2.org/")
 set(PROJECT_DESCRIPTION "The SSH library")
+include(flags OPTIONAL)
 
 if (CMAKE_VERSION VERSION_LESS "3.1")
   if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
@@ -77,6 +82,18 @@ if(NOT LIBSSH2_VERSION OR
     "${CMAKE_CURRENT_SOURCE_DIR}/include/libssh2.h")
 endif()
 
+if(NOT DEFINED LIBSSH2_VER)
+  set(LIBSSH2_VER ${LIBSSH2_VERSION})
+elseif(NOT LIBSSH2_VER STREQUAL LIBSSH2_VERSION)
+  message(AUTHOR_WARNING "version passed in (${LIBSSH2_VER}) doesn't match version from include/libssh2.h (${LIBSSH2_VERSION})")
+endif()
+if(XP_INSTALL_DIRS)
+  set(_ver _${LIBSSH2_VER})
+  set(CMAKE_INSTALL_DOCDIR share/doc/${PROJECT_NAME}${_ver})
+  set(CMAKE_INSTALL_INCLUDEDIR include/${PROJECT_NAME}${_ver}/${PROJECT_NAME})
+  set(XP_OPT_INSTALL EXCLUDE_FROM_ALL)
+endif()
+
 include(GNUInstallDirs)
 install(
   FILES docs/AUTHORS COPYING docs/HACKING README RELEASE-NOTES NEWS
diff --git a/docs/CMakeLists.txt b/docs/CMakeLists.txt
index 6abf0e4..5002089 100644
--- a/docs/CMakeLists.txt
+++ b/docs/CMakeLists.txt
@@ -207,4 +207,4 @@ set(MAN_PAGES
   libssh2_version.3)
 
 include(GNUInstallDirs)
-install(FILES ${MAN_PAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
+install(FILES ${MAN_PAGES} ${XP_OPT_INSTALL} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2eaf4cc..3b4a809 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -60,7 +60,14 @@ endif()
 
 if(CRYPTO_BACKEND STREQUAL "OpenSSL" OR NOT CRYPTO_BACKEND)
 
-  find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  option(FIND_OPENSSL_MODULE_PATH "Find OpenSSL in CMAKE_MODULE_PATH" OFF)
+  mark_as_advanced(FIND_OPENSSL_MODULE_PATH)
+
+  if(FIND_OPENSSL_MODULE_PATH)
+    find_package(usexp-OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT} PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  endif()
 
   if(OPENSSL_FOUND)
     set(CRYPTO_BACKEND "OpenSSL")
@@ -216,14 +223,15 @@ endif()
 
 add_library(libssh2 ${SOURCES})
 # we want it to be called libssh2 on all platforms
-set_target_properties(libssh2 PROPERTIES PREFIX "")
+set_target_properties(libssh2 PROPERTIES OUTPUT_NAME libssh2${_ver} PREFIX "")
 
 target_compile_definitions(libssh2 PRIVATE ${PRIVATE_COMPILE_DEFINITIONS})
 target_include_directories(libssh2
   PRIVATE "${PROJECT_SOURCE_DIR}/include/" ${PRIVATE_INCLUDE_DIRECTORIES}
   PUBLIC
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
-    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>)
+    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include/${PROJECT_NAME}${_ver}> #include <libssh2/libssh2.h>
+    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>)   #include <libssh2.h>
 
 ## Options
 
@@ -239,9 +247,16 @@ option(ENABLE_ZLIB_COMPRESSION "Use zlib for compression")
 add_feature_info(Compression ENABLE_ZLIB_COMPRESSION
   "using zlib for compression")
 if(ENABLE_ZLIB_COMPRESSION)
-  find_package(ZLIB REQUIRED)
+  option(FIND_ZLIB_MODULE_PATH "Find zlib in CMAKE_MODULE_PATH" OFF)
+  mark_as_advanced(FIND_ZLIB_MODULE_PATH)
+
+  if(FIND_ZLIB_MODULE_PATH)
+    find_package(usexp-ZLIB REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(ZLIB REQUIRED)
+    target_include_directories(libssh2 PRIVATE ${ZLIB_INCLUDE_DIRS})
+  endif()
 
-  target_include_directories(libssh2 PRIVATE ${ZLIB_INCLUDE_DIRS})
   list(APPEND LIBRARIES ${ZLIB_LIBRARIES})
   list(APPEND PC_REQUIRES_PRIVATE zlib)
   if(ZLIB_FOUND)
@@ -389,14 +404,20 @@ set(RUNTIME_DEPENDENCIES ${_RUNTIME_DEPENDENCIES} CACHE INTERNAL
 
 # Package config
 
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace ${XP_NAMESPACE}::)
+else()
+  set(nameSpace Libssh2::)
+endif()
+
 ## During package installation, install Libssh2Config.cmake
 install(EXPORT Libssh2Config
-  NAMESPACE Libssh2::
-  DESTINATION lib/cmake/libssh2)
+  NAMESPACE ${nameSpace}
+  DESTINATION lib/cmake/libssh2${_ver})
 
 ## During build, register directly from build tree
 # create Libssh2Config.cmake
-export(TARGETS libssh2 NAMESPACE Libssh2:: FILE Libssh2Config.cmake)
+export(TARGETS libssh2 NAMESPACE ${nameSpace} FILE Libssh2Config.cmake)
 export(PACKAGE Libssh2) # register it
 
 ## Export a .pc file for client projects not using CMaek
@@ -409,6 +430,7 @@ endif()
 configure_file(libssh2.pc.in libssh2.pc @ONLY)
 install(
   FILES ${CMAKE_CURRENT_BINARY_DIR}/libssh2.pc
+  RENAME libssh2${_ver}.pc ${XP_OPT_INSTALL}
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
 ## Versioning
@@ -424,4 +446,4 @@ write_basic_package_version_file(
   COMPATIBILITY SameMajorVersion)
 install(
   FILES ${CMAKE_CURRENT_BINARY_DIR}/Libssh2ConfigVersion.cmake
-  DESTINATION lib/cmake/libssh2)
+  DESTINATION lib/cmake/libssh2${_ver})
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index c8c5253..525f4c7 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -36,7 +36,6 @@
 include(CheckIncludeFiles)
 include(CheckFunctionExists)
 include(CheckSymbolExists)
-include(BundleUtilities)
 include(CopyRuntimeDependencies)
 include(SocketLibraries)
 
@@ -72,7 +71,11 @@ endif()
 
 if(CRYPTO_BACKEND STREQUAL "OpenSSL" OR NOT CRYPTO_BACKEND)
 
-  find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  if(FIND_OPENSSL_MODULE_PATH)
+    find_package(usexp-OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT} PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(OpenSSL ${SPECIFIC_CRYPTO_REQUIREMENT})
+  endif()
 
   if(OPENSSL_FOUND)
     set(CRYPTO_BACKEND "OpenSSL")
@@ -124,8 +127,8 @@ if(CRYPTO_BACKEND STREQUAL "OpenSSL")
     list(APPEND TESTS
       public_key_auth_succeeds_with_correct_rsa_openssh_key
     )
-    if(OPENSSL_VERSION VERSION_GREATER "1.1.0")
-      list(APPEND TESTS
+    if(OPENSSL_VERSION VERSION_GREATER "1.1.0" AND FALSE)
+      list(APPEND TESTS # source code does not exist
         public_key_auth_succeeds_with_correct_ed25519_key
         public_key_auth_succeeds_with_correct_encrypted_ed25519_key
         public_key_auth_succeeds_with_correct_ed25519_key_from_mem
