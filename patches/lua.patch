diff --git a/CMakeLists.txt b/CMakeLists.txt
index cc303f5..093a636 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,9 @@
 # Please note that the package source code is licensed under its own license.
 
 project ( lua C )
-cmake_minimum_required ( VERSION 2.8 )
+cmake_minimum_required ( VERSION 2.8...3.21 )
+include(GNUInstallDirs)
+include(flags OPTIONAL)
 include ( cmake/dist.cmake )
 
 ## CONFIGURATION
@@ -17,7 +19,7 @@ set ( LUA_INIT "LUA_INIT" CACHE STRING "Environment variable for initial script.
 option ( LUA_ANSI "Use only ansi features." OFF )
 option ( LUA_USE_RELATIVE_LOADLIB "Use modified loadlib.c with support for relative paths on posix systems." ON )
 option ( LUA_COMPAT_ALL "Enable backwards compatibility options." ON )
-set ( LUA_IDSIZE 60 CACHE NUMBER "gives the maximum size for the description of the source." )
+set ( LUA_IDSIZE 60 CACHE STRING "gives the maximum size for the description of the source." )
 
 #2DO: LUAI_* and LUAL_* settings, for now defaults are used.
 set ( LUA_DIRSEP "/" )
@@ -88,7 +90,7 @@ if ( LUA_USE_DLOPEN )
   # Link to dynamic linker library "dl"
 	find_library ( DL_LIBRARY NAMES dl )
 	if ( DL_LIBRARY )
-  	list ( APPEND LIBS ${DL_LIBRARY} )
+  	list ( APPEND LIBS dl )
 	endif ( )
 endif ( )
 
@@ -128,6 +130,10 @@ endif ( )
 ## BUILD
 # Create lua library
 add_library ( liblua ${SRC_CORE} ${SRC_LIB} ${LUA_DLL_RC} ${LUA_DEF} )
+target_include_directories(liblua PUBLIC $<INSTALL_INTERFACE:${INSTALL_INC}>)
+if(DEFINED LUABRIDGE_INCDIR)
+  target_include_directories(liblua PUBLIC $<INSTALL_INTERFACE:${LUABRIDGE_INCDIR}>)
+endif()
 target_link_libraries ( liblua ${LIBS} )
 set_target_properties ( liblua PROPERTIES OUTPUT_NAME lua CLEAN_DIRECT_OUTPUT 1 )
 if ( LUA_BUILD_AS_DLL )
@@ -147,11 +153,12 @@ if ( LUA_BUILD_WLUA )
   install_executable ( wlua )
 endif ( )
 
+set(targetsFile ${PROJECT_NAME}-targets)
 install_executable ( lua luac )
 install_library ( liblua )
 install_data ( README.md )
 #install_lua_module ( strict etc/strict.lua )
-install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )
+install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h INTO ${PROJECT_NAME} )
 install_doc ( doc/ )
 install_foo ( etc/ )
 #install_test ( test/ )
diff --git a/cmake/FindReadline.cmake b/cmake/FindReadline.cmake
index 5401a9b..a063240 100644
--- a/cmake/FindReadline.cmake
+++ b/cmake/FindReadline.cmake
@@ -22,4 +22,4 @@ set ( READLINE_INCLUDE_DIRS ${READLINE_INCLUDE_DIR} )
 include ( FindPackageHandleStandardArgs )
 # handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE
 # if all listed variables are TRUE
-find_package_handle_standard_args ( readline DEFAULT_MSG READLINE_LIBRARY READLINE_INCLUDE_DIR )
+find_package_handle_standard_args ( Readline DEFAULT_MSG READLINE_LIBRARY READLINE_INCLUDE_DIR )
diff --git a/cmake/dist.cmake b/cmake/dist.cmake
index 310ef94..01b6435 100644
--- a/cmake/dist.cmake
+++ b/cmake/dist.cmake
@@ -50,11 +50,11 @@ message ( "DIST_DEPENDS: ${DIST_DEPENDS}")
 
 ## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)
 # Primary paths
-set ( INSTALL_BIN bin CACHE PATH "Where to install binaries to." )
-set ( INSTALL_LIB lib CACHE PATH "Where to install libraries to." )
-set ( INSTALL_INC include CACHE PATH "Where to install headers to." )
-set ( INSTALL_ETC etc CACHE PATH "Where to store configuration files" )
-set ( INSTALL_SHARE share CACHE PATH "Directory for shared data." )
+set ( INSTALL_BIN ${CMAKE_INSTALL_BINDIR} CACHE PATH "Where to install binaries to." )
+set ( INSTALL_LIB ${CMAKE_INSTALL_LIBDIR} CACHE PATH "Where to install libraries to." )
+set ( INSTALL_INC ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH "Where to install headers to." )
+set ( INSTALL_ETC ${CMAKE_INSTALL_SYSCONFDIR} CACHE PATH "Where to store configuration files" )
+set ( INSTALL_SHARE ${CMAKE_INSTALL_DATADIR} CACHE PATH "Directory for shared data." )
 
 # Secondary paths
 option ( INSTALL_VERSION
@@ -142,7 +142,7 @@ macro ( install_executable )
                               SOVERSION ${DIST_VERSION} )
     endif ()
     install ( TARGETS ${_file} RUNTIME DESTINATION ${INSTALL_BIN}
-              COMPONENT Runtime )
+              COMPONENT Runtime CONFIGURATIONS Release )
   endforeach()
 endmacro ()
 
@@ -159,11 +159,18 @@ macro ( install_library )
       set_target_properties ( ${_file} PROPERTIES VERSION ${DIST_VERSION}
                               SOVERSION ${DIST_VERSION} )
     endif ()
-    install ( TARGETS ${_file}
+    install ( TARGETS ${_file} EXPORT ${targetsFile}
               RUNTIME DESTINATION ${INSTALL_BIN} COMPONENT Runtime
               LIBRARY DESTINATION ${INSTALL_LIB} COMPONENT Runtime 
               ARCHIVE DESTINATION ${INSTALL_LIB} COMPONENT Library )
   endforeach()
+  if(DEFINED XP_NAMESPACE)
+    set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+  endif()
+  if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+    set(XP_INSTALL_CMAKEDIR ${INSTALL_SHARE}/cmake)
+  endif()
+  install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
 endmacro ()
 
 # helper function for various install_* functions, for PATTERN/REGEX args.
