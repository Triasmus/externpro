diff --git a/CMakeLists.txt b/CMakeLists.txt
index cc303f5..12f1aae 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,6 +6,7 @@
 
 project ( lua C )
 cmake_minimum_required ( VERSION 2.8 )
+include ( flags OPTIONAL )
 include ( cmake/dist.cmake )
 
 ## CONFIGURATION
@@ -17,7 +18,7 @@ set ( LUA_INIT "LUA_INIT" CACHE STRING "Environment variable for initial script.
 option ( LUA_ANSI "Use only ansi features." OFF )
 option ( LUA_USE_RELATIVE_LOADLIB "Use modified loadlib.c with support for relative paths on posix systems." ON )
 option ( LUA_COMPAT_ALL "Enable backwards compatibility options." ON )
-set ( LUA_IDSIZE 60 CACHE NUMBER "gives the maximum size for the description of the source." )
+set ( LUA_IDSIZE 60 CACHE STRING "gives the maximum size for the description of the source." )
 
 #2DO: LUAI_* and LUAL_* settings, for now defaults are used.
 set ( LUA_DIRSEP "/" )
@@ -88,7 +89,7 @@ if ( LUA_USE_DLOPEN )
   # Link to dynamic linker library "dl"
 	find_library ( DL_LIBRARY NAMES dl )
 	if ( DL_LIBRARY )
-  	list ( APPEND LIBS ${DL_LIBRARY} )
+  	list ( APPEND LIBS dl )
 	endif ( )
 endif ( )
 
@@ -125,11 +126,25 @@ else ( )
   list ( APPEND SRC_LIB src/loadlib.c )
 endif ( )
 
+## VERSION
+if(NOT DEFINED LUA_VER)
+  set(LUA_VER ${DIST_VERSION})
+elseif(NOT ${LUA_VER} STREQUAL ${DIST_VERSION})
+  message(AUTHOR_WARNING "version passed in (${LUA_VER}) doesn't match internal version (${DIST_VERSION})")
+endif()
+set(ver _${LUA_VER})
+set(verDir /${PROJECT_NAME}${ver}/)
+set(targetsFile ${PROJECT_NAME}${ver}-targets)
+
 ## BUILD
 # Create lua library
 add_library ( liblua ${SRC_CORE} ${SRC_LIB} ${LUA_DLL_RC} ${LUA_DEF} )
+target_include_directories ( liblua PUBLIC $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${INSTALL_INC}${verDir}> )
+if ( DEFINED LUABRIDGE_INCDIR )
+  target_include_directories ( liblua PUBLIC $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${INSTALL_INC}/${LUABRIDGE_INCDIR}> )
+endif ()
 target_link_libraries ( liblua ${LIBS} )
-set_target_properties ( liblua PROPERTIES OUTPUT_NAME lua CLEAN_DIRECT_OUTPUT 1 )
+set_target_properties ( liblua PROPERTIES OUTPUT_NAME lua${ver} CLEAN_DIRECT_OUTPUT 1 )
 if ( LUA_BUILD_AS_DLL )
   set_target_properties ( liblua PROPERTIES COMPILE_DEFINITIONS LUA_BUILD_AS_DLL )
 endif ()
@@ -151,7 +166,7 @@ install_executable ( lua luac )
 install_library ( liblua )
 install_data ( README.md )
 #install_lua_module ( strict etc/strict.lua )
-install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )
+install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h INTO ${verDir}lua )
 install_doc ( doc/ )
 install_foo ( etc/ )
 #install_test ( test/ )
diff --git a/cmake/FindReadline.cmake b/cmake/FindReadline.cmake
index 5401a9b..a063240 100644
--- a/cmake/FindReadline.cmake
+++ b/cmake/FindReadline.cmake
@@ -22,4 +22,4 @@ set ( READLINE_INCLUDE_DIRS ${READLINE_INCLUDE_DIR} )
 include ( FindPackageHandleStandardArgs )
 # handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE
 # if all listed variables are TRUE
-find_package_handle_standard_args ( readline DEFAULT_MSG READLINE_LIBRARY READLINE_INCLUDE_DIR )
+find_package_handle_standard_args ( Readline DEFAULT_MSG READLINE_LIBRARY READLINE_INCLUDE_DIR )
diff --git a/cmake/dist.cmake b/cmake/dist.cmake
index 310ef94..017fdd0 100644
--- a/cmake/dist.cmake
+++ b/cmake/dist.cmake
@@ -59,7 +59,7 @@ set ( INSTALL_SHARE share CACHE PATH "Directory for shared data." )
 # Secondary paths
 option ( INSTALL_VERSION
       "Install runtime libraries and executables with version information." OFF)
-set ( INSTALL_DATA ${INSTALL_SHARE}/${DIST_NAME} CACHE PATH
+set ( INSTALL_DATA ${INSTALL_SHARE}/${DIST_NAME}_${DIST_VERSION} CACHE PATH
       "Directory the package can store documentation, tests or other data in.")  
 set ( INSTALL_DOC  ${INSTALL_DATA}/doc CACHE PATH
       "Recommended directory to install documentation into.")
@@ -140,9 +140,11 @@ macro ( install_executable )
     if ( INSTALL_VERSION )
       set_target_properties ( ${_file} PROPERTIES VERSION ${DIST_VERSION}
                               SOVERSION ${DIST_VERSION} )
+    else ()
+      set_target_properties ( ${_file} PROPERTIES OUTPUT_NAME ${_file}${ver} )
     endif ()
     install ( TARGETS ${_file} RUNTIME DESTINATION ${INSTALL_BIN}
-              COMPONENT Runtime )
+              COMPONENT Runtime CONFIGURATIONS Release )
   endforeach()
 endmacro ()
 
@@ -159,11 +161,15 @@ macro ( install_library )
       set_target_properties ( ${_file} PROPERTIES VERSION ${DIST_VERSION}
                               SOVERSION ${DIST_VERSION} )
     endif ()
-    install ( TARGETS ${_file}
+    install ( TARGETS ${_file} EXPORT ${targetsFile}
               RUNTIME DESTINATION ${INSTALL_BIN} COMPONENT Runtime
               LIBRARY DESTINATION ${INSTALL_LIB} COMPONENT Runtime 
               ARCHIVE DESTINATION ${INSTALL_LIB} COMPONENT Library )
   endforeach()
+  if ( DEFINED XP_NAMESPACE )
+    set ( nameSpace NAMESPACE ${XP_NAMESPACE}:: )
+  endif ()
+  install ( EXPORT ${targetsFile} DESTINATION ${INSTALL_LIB}/cmake ${nameSpace} )
 endmacro ()
 
 # helper function for various install_* functions, for PATTERN/REGEX args.
