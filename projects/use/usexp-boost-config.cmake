string(TOUPPER @NAME@ PRJ)
set(${PRJ}_VER "@VER@ [@PROJECT_NAME@]")
@FIND_DEPS@# this file (-config) installed to share/cmake
get_filename_component(XP_ROOTDIR ${CMAKE_CURRENT_LIST_DIR}/../.. ABSOLUTE)
get_filename_component(XP_ROOTDIR ${XP_ROOTDIR} ABSOLUTE) # remove relative parts
# see BoostConfig.cmake for details on the following variables
set(Boost_FIND_QUIETLY TRUE)
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME ON)
#set(Boost_VERBOSE TRUE) # enable verbose output of BoostConfig.cmake
#set(Boost_DEBUG TRUE) # enable debug (even more verbose) output of BoostConfig.cmake
set(boostPath ${XP_ROOTDIR}/lib/cmake/Boost-@VER@)
find_package(Boost @VER@ REQUIRED ALL PATHS ${boostPath} NO_DEFAULT_PATH)
mark_as_advanced(Boost_DIR)
if(UNIX)
  include(CheckLibraryExists)
  function(checkLibraryConcat lib symbol liblist)
    string(TOUPPER ${lib} LIB)
    check_library_exists("${lib}" "${symbol}" "" XP_BOOST_HAS_${LIB})
    if(XP_BOOST_HAS_${LIB})
      list(APPEND ${liblist} ${lib})
      set(${liblist} ${${liblist}} PARENT_SCOPE)
    endif()
  endfunction()
  checkLibraryConcat(rt shm_open headersDeps) # req'd by interprocess
  if(DEFINED headersDeps AND TARGET Boost::headers)
    get_target_property(libs Boost::headers INTERFACE_LINK_LIBRARIES)
    if(libs)
      list(APPEND libs ${headersDeps})
    else()
      set(libs ${headersDeps})
    endif()
    set_target_properties(Boost::headers PROPERTIES INTERFACE_LINK_LIBRARIES "${libs}")
  endif()
endif()
set(${PRJ}_LIBRARIES ${Boost_LIBRARIES})
set(reqVars ${PRJ}_VER ${PRJ}_LIBRARIES)
include(FindPackageHandleStandardArgs)
set(FPHSA_NAME_MISMATCHED TRUE) # find_package_handle_standard_args NAME_MISMATCHED (prefix usexp-)
find_package_handle_standard_args(@NAME@ REQUIRED_VARS ${reqVars})
mark_as_advanced(${reqVars})
